{
    "swagger": "2.0",
    "basePath": "/rest",
    "info": {
        "description": "\n# Introduction \nWelcome to Cartrack\\'s Fleet API documentation. Welcome to Cartrack's Fleet API documentation. We often update the documentation, don't forget to bookmark the page. If you have any inquiries or issues, contact one of our sales representatives.",
        "version": "1.0.0",
        "title": "Fleet REST API",
        "x-logo": {
            "url": "favicon.png",
            "altText": "Cartrack logo",
            "href": "https://developer.cartrack.com"
        }
    },
    "schemes": [
        "https"
    ],
    "paths": {
        "/delivery/countries": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Get the delivery countries",
                "tags": [
                    "Delivery"
                ],
                "description": "This function will get the delivery country",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": "",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/country"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            }
        },
        "/delivery/customers": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Create a delivery customer",
                "tags": [
                    "Delivery"
                ],
                "description": "This function create the customer",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The json data that needs to be processed",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/delivery_customer_entry"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "$ref": "#/definitions/delivery_customer"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            },
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Get all delivery customers' details",
                "tags": [
                    "Delivery"
                ],
                "description": "This function get the customer list",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "filter[customer_id]",
                        "in": "path",
                        "description": "Filter by customer ID",
                        "required": false,
                        "type": "string",
                        "example": "f3a42187-0c6e-11ec-aa41-a4bf016cd6b2"
                    },
                    {
                        "name": "filter[email]",
                        "in": "path",
                        "description": "Filter by email",
                        "required": false,
                        "type": "string",
                        "example": "steven.jobs@apple.com"
                    },
                    {
                        "name": "filter[country_id]",
                        "in": "path",
                        "description": "Filter by country ID.",
                        "required": false,
                        "type": "string",
                        "example": "193"
                    },
                    {
                        "name": "filter[customer_name]",
                        "in": "path",
                        "description": "Filter by customer name",
                        "required": false,
                        "type": "string",
                        "example": "Steven"
                    },
                    {
                        "name": "filter[date_from]",
                        "in": "path",
                        "description": "Filter by creation date from",
                        "required": false,
                        "type": "string",
                        "example": "2021-09-08 Or 2021-09-08 23:59:59"
                    },
                    {
                        "name": "filter[date_to]",
                        "in": "path",
                        "description": "Filter by creation date to",
                        "required": false,
                        "type": "string",
                        "example": "2021-09-31 Or 2021-09-31 23:59:59"
                    },
                    {
                        "name": "page",
                        "in": "path",
                        "description": "The current page",
                        "required": false,
                        "type": "integer",
                        "example": 1
                    },
                    {
                        "name": "limit",
                        "in": "path",
                        "description": "The number of items to display per page",
                        "required": false,
                        "type": "integer",
                        "example": 15
                    },
                    {
                        "name": "sort",
                        "in": "path",
                        "description": "Data sorting + for asceding, - for descending",
                        "required": false,
                        "type": "string",
                        "example": "+create_ts,-customer_name"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/http_success_customer"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            }
        },
        "/delivery/customers/{customerId}": {
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Delete a delivery customer",
                "tags": [
                    "Delivery"
                ],
                "description": "This function will delete the customer",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "customerId",
                        "in": "path",
                        "description": "The customerId you want to delete",
                        "required": true,
                        "type": "string",
                        "example": 123
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "string",
                                    "example": null
                                },
                                "meta": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Successfully deleted customer."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized ",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            },
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Get a delivery customer's details",
                "tags": [
                    "Delivery"
                ],
                "description": "This function will get the customer details",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "customerId",
                        "in": "path",
                        "description": "The customerId you want to get",
                        "required": true,
                        "type": "string",
                        "example": 123
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "$ref": "#/definitions/delivery_customer"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized ",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Update a delivery customer",
                "tags": [
                    "Delivery"
                ],
                "description": "This function updates the customer details",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The json data that needs to be processed",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/delivery_customer_entry"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "$ref": "#/definitions/delivery_customer"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            }
        },
        "/delivery/drivers": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Get all delivery drivers",
                "tags": [
                    "Delivery"
                ],
                "description": "This function updates the driver's details",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The json data that needs to be processed",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/update_driver"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/http_success_driver"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            },
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Get all delivery drivers' details",
                "tags": [
                    "Delivery"
                ],
                "description": "This function will get the drivers",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "filter[delivery_driver_id]",
                        "in": "path",
                        "description": "Filter by driver",
                        "required": false,
                        "type": "string",
                        "example": "f3a42187-0c6e-11ec-aa41-a4bf016cd6b2"
                    },
                    {
                        "name": "filter[email]",
                        "in": "path",
                        "description": "Filter by email",
                        "required": false,
                        "type": "string",
                        "example": "steven.jobs@apple.com"
                    },
                    {
                        "name": "filter[registration]",
                        "in": "path",
                        "description": "Filter by vehicle registration",
                        "required": false,
                        "type": "string",
                        "example": "XL-TOYOTA"
                    },
                    {
                        "name": "filter[driver_status_id]",
                        "in": "path",
                        "description": "Filter by status, 1 = Ready, 2 = On Route, 3 = Idle, 4 = Offline, 5 = On Break",
                        "required": false,
                        "type": "string",
                        "example": "steven.jobs@apple.com",
                        "enum": [
                            1,
                            2,
                            3,
                            4,
                            5
                        ]
                    },
                    {
                        "name": "filter[date_from]",
                        "in": "path",
                        "description": "Filter by creation date from",
                        "required": false,
                        "type": "string",
                        "example": "2021-10-01 Or 2021-10-01 00:00:00",
                        "enum": [
                            1,
                            2,
                            3,
                            4
                        ]
                    },
                    {
                        "name": "filter[date_to]",
                        "in": "path",
                        "description": "Filter by creation date to",
                        "required": false,
                        "type": "string",
                        "example": "2021-10-31 Or 2021-10-31 23:59:59",
                        "enum": [
                            1,
                            2,
                            3,
                            4
                        ]
                    },
                    {
                        "name": "page",
                        "in": "path",
                        "description": "The current page",
                        "required": false,
                        "type": "integer",
                        "example": 1
                    },
                    {
                        "name": "limit",
                        "in": "path",
                        "description": "The number of items to display per page",
                        "required": false,
                        "type": "integer",
                        "example": 15
                    },
                    {
                        "name": "sort",
                        "in": "path",
                        "description": "Data sorting + for asceding, - for descending",
                        "required": false,
                        "type": "string",
                        "example": "+create_ts,-registration,driver_status_id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/driver"
                                    }
                                },
                                "meta": {
                                    "$ref": "#/definitions/meta"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            }
        },
        "/delivery/drivers/{driverId}": {
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Delete a delivery driver",
                "tags": [
                    "Delivery"
                ],
                "description": "This function will delete the customer",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "driverId",
                        "in": "path",
                        "description": "The driverId you want to delete",
                        "required": true,
                        "type": "string",
                        "example": "62462fcf-0938-11ec-8c4d-a4bf016cd6b2"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "string",
                                    "example": null
                                },
                                "meta": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Successfully deleted driver."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized ",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Update a delivery driver's details",
                "tags": [
                    "Delivery"
                ],
                "description": "This function updates the driver's details",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "driverId",
                        "in": "path",
                        "description": "The UUID of the driver",
                        "required": true,
                        "type": "string",
                        "example": "f3a42187-0c6e-11ec-aa41-a4bf016cd6b2"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The json data that needs to be processed",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/update_driver"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/http_success_driver"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            },
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Get a delivery driver's details",
                "tags": [
                    "Delivery"
                ],
                "description": "This function will get the driver details",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": "",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "$ref": "#/definitions/delivery_job"
                                },
                                "meta": {
                                    "$ref": "#/definitions/meta"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            }
        },
        "/delivery/drivers/{driverId}/jobs": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Get all jobs for a delivery driver",
                "tags": [
                    "Delivery"
                ],
                "description": "This function will get the driver's jobs",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "filter[job_id]",
                        "in": "path",
                        "description": "Filter by job ID",
                        "required": false,
                        "type": "integer",
                        "example": "1"
                    },
                    {
                        "name": "filter[order_id]",
                        "in": "path",
                        "description": "Filter by order ID",
                        "required": false,
                        "type": "string",
                        "example": "20210908000002"
                    },
                    {
                        "name": "filter[schedule_type_id]",
                        "in": "path",
                        "description": "Filter by schedule type, 1 = ASAP, 2 = Scheduled",
                        "required": false,
                        "type": "integer",
                        "example": "1",
                        "enum": [
                            1,
                            2
                        ]
                    },
                    {
                        "name": "filter[job_status_id]",
                        "in": "path",
                        "description": "Filter by status, 1 = Non-Assigned, 2 = Assign Later, 3 = Rejected/Failed, 4 = Assigned, 5 = Completed, 6 = Exception",
                        "required": false,
                        "type": "integer",
                        "example": "1",
                        "enum": [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6
                        ]
                    },
                    {
                        "name": "filter[create_ts_from]",
                        "in": "path",
                        "description": "Filter by creation date from",
                        "required": false,
                        "type": "string",
                        "example": "2021-10-01 Or 2021-10-01 00:00:00",
                        "enum": [
                            1,
                            2,
                            3,
                            4
                        ]
                    },
                    {
                        "name": "filter[create_ts_to]",
                        "in": "path",
                        "description": "Filter by creation date to",
                        "required": false,
                        "type": "string",
                        "example": "2021-10-31 Or 2021-10-31 23:59:59",
                        "enum": [
                            1,
                            2,
                            3,
                            4
                        ]
                    },
                    {
                        "name": "filter[delivery_ts_from]",
                        "in": "path",
                        "description": "Filter by delivery date from",
                        "required": false,
                        "type": "string",
                        "example": "2021-10-01 Or 2021-10-01 00:00:00",
                        "enum": [
                            1,
                            2,
                            3,
                            4
                        ]
                    },
                    {
                        "name": "filter[delivery_ts_to]",
                        "in": "path",
                        "description": "Filter by delivery date to",
                        "required": false,
                        "type": "string",
                        "example": "2021-10-31 Or 2021-10-31 23:59:59",
                        "enum": [
                            1,
                            2,
                            3,
                            4
                        ]
                    },
                    {
                        "name": "page",
                        "in": "path",
                        "description": "The current page",
                        "required": false,
                        "type": "integer",
                        "example": 1
                    },
                    {
                        "name": "limit",
                        "in": "path",
                        "description": "The number of items to display per page",
                        "required": false,
                        "type": "integer",
                        "example": 15
                    },
                    {
                        "name": "sort",
                        "in": "path",
                        "description": "Data sorting + for asceding, - for descending",
                        "required": false,
                        "type": "string",
                        "example": "+create_ts,-registration,driver_status_id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/delivery_job"
                                    }
                                },
                                "meta": {
                                    "$ref": "#/definitions/meta"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            }
        },
        "/delivery/jobs/assign/{driverId}": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Reassign jobs to a delivery driver",
                "tags": [
                    "Delivery"
                ],
                "description": "This function will reassign jobs to driver",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "driverId",
                        "in": "path",
                        "description": "The UUID of the driver to assign jobs to",
                        "required": true,
                        "type": "string",
                        "example": "f3a42187-0c6e-11ec-aa41-a4bf016cd6b2"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The json data that needs to be processed",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "job_ids": {
                                    "name": "test",
                                    "type": "array",
                                    "example": [
                                        61,
                                        22,
                                        358
                                    ]
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "string",
                                    "example": null
                                },
                                "meta": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Successfully assigned jobs to the driver."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            }
        },
        "/delivery/jobs": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Create a delivery job",
                "tags": [
                    "Delivery"
                ],
                "description": "This function will create the job",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The json data that needs to be processed",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/delivery_job_create"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/delivery_job"
                                    }
                                },
                                "meta": {
                                    "$ref": "#/definitions/meta"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            },
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Get all delivery jobs",
                "tags": [
                    "Delivery"
                ],
                "description": "This function will get all jobs by the user",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "filter[job_id]",
                        "in": "path",
                        "description": "Filter by job ID",
                        "required": false,
                        "type": "integer",
                        "example": "1"
                    },
                    {
                        "name": "filter[order_id]",
                        "in": "path",
                        "description": "Filter by order ID",
                        "required": false,
                        "type": "string",
                        "example": "20210908000002"
                    },
                    {
                        "name": "filter[schedule_type_id]",
                        "in": "path",
                        "description": "Filter by schedule type, 1 = ASAP, 2 = Scheduled",
                        "required": false,
                        "type": "integer",
                        "example": "1",
                        "enum": [
                            1,
                            2
                        ]
                    },
                    {
                        "name": "filter[job_status_id]",
                        "in": "path",
                        "description": "Filter by status, 1 = Non-Assigned, 2 = Assign Later, 3 = Rejected/Failed, 4 = Assigned, 5 = Completed, 6 = Exception",
                        "required": false,
                        "type": "integer",
                        "example": "1",
                        "enum": [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6
                        ]
                    },
                    {
                        "name": "filter[create_ts_from]",
                        "in": "path",
                        "description": "Filter by creation date from",
                        "required": false,
                        "type": "string",
                        "example": "2021-10-01 Or 2021-10-01 00:00:00",
                        "enum": [
                            1,
                            2,
                            3,
                            4
                        ]
                    },
                    {
                        "name": "filter[create_ts_to]",
                        "in": "path",
                        "description": "Filter by creation date to",
                        "required": false,
                        "type": "string",
                        "example": "2021-10-31 Or 2021-10-31 23:59:59",
                        "enum": [
                            1,
                            2,
                            3,
                            4
                        ]
                    },
                    {
                        "name": "filter[delivery_ts_from]",
                        "in": "path",
                        "description": "Filter by delivery date from",
                        "required": false,
                        "type": "string",
                        "example": "2021-10-01 Or 2021-10-01 00:00:00",
                        "enum": [
                            1,
                            2,
                            3,
                            4
                        ]
                    },
                    {
                        "name": "filter[delivery_ts_to]",
                        "in": "path",
                        "description": "Filter by delivery date to",
                        "required": false,
                        "type": "string",
                        "example": "2021-10-31 Or 2021-10-31 23:59:59",
                        "enum": [
                            1,
                            2,
                            3,
                            4
                        ]
                    },
                    {
                        "name": "page",
                        "in": "path",
                        "description": "The current page",
                        "required": false,
                        "type": "integer",
                        "example": 1
                    },
                    {
                        "name": "limit",
                        "in": "path",
                        "description": "The number of items to display per page",
                        "required": false,
                        "type": "integer",
                        "example": 15
                    },
                    {
                        "name": "sort",
                        "in": "path",
                        "description": "Data sorting + for asceding, - for descending",
                        "required": false,
                        "type": "string",
                        "example": "+create_ts,-registration,driver_status_id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/delivery_job"
                                    }
                                },
                                "meta": {
                                    "$ref": "#/definitions/meta"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            }
        },
        "/delivery/jobs/{jobId}": {
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Delete a delivery job",
                "tags": [
                    "Delivery"
                ],
                "description": "This function will delete the job",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "jobId",
                        "in": "path",
                        "description": "The jobId you want to delete",
                        "required": true,
                        "type": "string",
                        "example": 123
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "string",
                                    "example": null
                                },
                                "meta": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Successfully deleted job."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized ",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            },
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Get a delivery job's details",
                "tags": [
                    "Delivery"
                ],
                "description": "This function will get the job detail",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": "",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/delivery_job"
                                    }
                                },
                                "meta": {
                                    "$ref": "#/definitions/meta"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Update a delivery job",
                "tags": [
                    "Delivery"
                ],
                "description": "This function will update the job",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The json data that needs to be processed",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/delivery_job_update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/delivery_job"
                                    }
                                },
                                "meta": {
                                    "$ref": "#/definitions/meta"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            }
        },
        "/drivers": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Add a driver",
                "tags": [
                    "Drivers"
                ],
                "description": "This endpoints creates a driver",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The json data that needs to be processed",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/create_driver_fleet"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/http_success_driver_fleet"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            },
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Get all drivers",
                "tags": [
                    "Drivers"
                ],
                "description": "This endpoint gets all/filtered list of the drivers",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "filter[first_name]",
                        "in": "query",
                        "description": "Filter by first name",
                        "required": false,
                        "type": "string",
                        "example": "Mark"
                    },
                    {
                        "name": "filter[last_name]",
                        "in": "query",
                        "description": "Filter by last name",
                        "required": false,
                        "type": "string",
                        "example": "Steven"
                    },
                    {
                        "name": "filter[id_number]",
                        "in": "query",
                        "description": "Filter by ID number",
                        "required": false,
                        "type": "string",
                        "example": "123456"
                    },
                    {
                        "name": "filter[email]",
                        "in": "query",
                        "description": "Filter by email",
                        "required": false,
                        "type": "string",
                        "example": "mark.steven@hotmail.com"
                    },
                    {
                        "name": "filter[phone_number]",
                        "in": "query",
                        "description": "Filter by phone number",
                        "required": false,
                        "type": "string",
                        "example": "08001234"
                    },
                    {
                        "name": "filter[license_number]",
                        "in": "query",
                        "description": "Filter by license number",
                        "required": false,
                        "type": "string",
                        "example": "ABC123"
                    },
                    {
                        "name": "filter[license_driver_restrictions]",
                        "in": "query",
                        "description": "Filter by driver restriction",
                        "required": false,
                        "type": "string",
                        "example": "Weekdays only"
                    },
                    {
                        "name": "filter[gender]",
                        "in": "query",
                        "description": "Filter by gender",
                        "required": false,
                        "type": "string",
                        "example": "Male",
                        "enum": [
                            "Male",
                            "Female"
                        ]
                    },
                    {
                        "name": "filter[license_issued_country]",
                        "in": "query",
                        "description": "Filter license by the issuing country",
                        "required": false,
                        "type": "string",
                        "example": "SG"
                    },
                    {
                        "name": "filter[license_valid_from]",
                        "in": "query",
                        "description": "Filter by license start date. Filters on exact match",
                        "required": false,
                        "type": "string",
                        "example": "mark.steven"
                    },
                    {
                        "name": "filter[license_valid_to]",
                        "in": "query",
                        "description": "Filter license end date. Filters on exact match",
                        "required": false,
                        "type": "string",
                        "example": "mark.steven"
                    },
                    {
                        "name": "filter[license_first_issue_date]",
                        "in": "query",
                        "description": "Filter by license first issue date. Filters on exact match",
                        "required": false,
                        "type": "date",
                        "example": "2022-01-12"
                    },
                    {
                        "name": "filter[license_points]",
                        "in": "query",
                        "description": "Filter by license points",
                        "required": false,
                        "type": "integer",
                        "example": 10
                    },
                    {
                        "name": "filter[status]",
                        "in": "query",
                        "description": "Filter by driver status.",
                        "required": false,
                        "type": "string",
                        "example": "Active",
                        "enum": [
                            "Active",
                            "Inactive",
                            "Can Drive All Vehicles",
                            "Cannot Drive All Vehicles"
                        ]
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The current page",
                        "required": false,
                        "type": "integer",
                        "example": 1
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The number of items to display per page",
                        "required": false,
                        "type": "integer",
                        "example": 15
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/driver_fleet"
                                    }
                                },
                                "meta": {
                                    "$ref": "#/definitions/meta"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            }
        },
        "/drivers/{driver_id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Get a driver's details",
                "tags": [
                    "Drivers"
                ],
                "description": "This endpoint gets the driver details",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "driver_id",
                        "in": "path",
                        "description": "The driver_id you want to get",
                        "required": true,
                        "type": "string",
                        "format": "uuid",
                        "example": "62462fcf-0938-11ec-8c4d-a4bf016cd6b2"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "$ref": "#/definitions/driver_fleet"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource Not Found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Update a driver",
                "tags": [
                    "Drivers"
                ],
                "description": "This endpoint updates the driver's details",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "driver_id",
                        "in": "path",
                        "description": "The driver_id you want to update",
                        "required": true,
                        "type": "string",
                        "format": "uuid",
                        "example": "62462fcf-0938-11ec-8c4d-a4bf016cd6b2"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The json data that needs to be processed",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/update_driver_fleet"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/http_success_driver_fleet"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            }
        },
        "/fitments": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Get all fitments",
                "tags": [
                    "Fitments"
                ],
                "description": "This endpoints returns the latest fitments or repairs of a Cartrack tracker/digital video recorder, using this endpoint",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "start_date",
                        "in": "query",
                        "description": "This will return fitments that happened after this date and time",
                        "required": true,
                        "type": "integer",
                        "example": "2022-01-01 00:00:00"
                    },
                    {
                        "name": "end_date",
                        "in": "query",
                        "description": "This will return fitments that happened before this date and time",
                        "required": true,
                        "type": "integer",
                        "example": "2022-01-01 23:59:59"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "description": "This array returns the list of fitments or repairs",
                                    "items": {
                                        "$ref": "#/definitions/fitment_item"
                                    }
                                },
                                "meta": {
                                    "$ref": "#/definitions/meta"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            }
        },
        "/geofences/{geofence_id}": {
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Delete a geofence",
                "tags": [
                    "Geofences"
                ],
                "description": "This endpoint deletes a geofence",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "geofence_id",
                        "in": "path",
                        "description": "The Geofence's ID",
                        "required": true,
                        "type": "string",
                        "format": "uuid",
                        "example": "02870802-xxxx-42ed-xxxx-c999df353f42"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "null",
                                    "example": null,
                                    "description": "This object will be null"
                                },
                                "meta": {
                                    "type": "object",
                                    "description": "This metadata will contain a message",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Successfully deleted the Geofence."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            },
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Get a geofence",
                "tags": [
                    "Geofences"
                ],
                "description": "This endpoint returns a geofence details",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "geofence_id",
                        "in": "path",
                        "description": "The geofence_id",
                        "required": true,
                        "type": "string",
                        "format": "uuid",
                        "example": "02870802-xxxx-42ed-xxxx-c999df353f42"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "$ref": "#/definitions/geofence_item"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Update a geofence",
                "tags": [
                    "Geofences"
                ],
                "description": "This endpoint updates an existing geofence",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "geofence_id",
                        "in": "path",
                        "description": "The geofence_id",
                        "required": true,
                        "type": "string",
                        "format": "uuid",
                        "example": "02870802-xxxx-42ed-xxxx-c999df353f42"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "One or more of the parameters to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/update_geofence"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "$ref": "#/definitions/geofence_item"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            }
        },
        "/geofences/visitors": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Get all geofences visitors",
                "tags": [
                    "Geofences"
                ],
                "description": "This endpoint gets all visitors for all geofences",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The current page",
                        "required": false,
                        "type": "integer",
                        "example": 1
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The number of items to display per page",
                        "required": false,
                        "type": "integer",
                        "example": 10
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/geofence_visitors"
                                    }
                                },
                                "meta": {
                                    "$ref": "#/definitions/meta"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            }
        },
        "/geofences/{geofence_id}/visitors": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Get a geofence's visitors by id",
                "tags": [
                    "Geofences"
                ],
                "description": "This endpoint gets all visitors for the given geofence id",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "geofence_id",
                        "in": "path",
                        "description": "The geofence_id",
                        "required": true,
                        "type": "string",
                        "example": "02870802-xxxx-42ed-xxxx-c999df353f42"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/geofence_visitors_item"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            }
        },
        "/geofences": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Get all geofences",
                "tags": [
                    "Geofences"
                ],
                "description": "This endpoint gets all/filtered list of geofences",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "filter[name]",
                        "in": "query",
                        "description": "Filter by geofence name, case insensitive, can be partial match",
                        "required": false,
                        "type": "string",
                        "example": "office"
                    },
                    {
                        "name": "filter[description]",
                        "in": "query",
                        "description": "Filter by geofence description, case insensitive, can be partial match",
                        "required": false,
                        "type": "string",
                        "example": "home"
                    },
                    {
                        "name": "filter[subuser_id]",
                        "in": "query",
                        "description": "Filter by the subuser_id",
                        "required": false,
                        "type": "string",
                        "format": "uuid",
                        "example": "7489ff44-xxxx-11eb-xxxx-005056a801ca"
                    },
                    {
                        "name": "filter[position_description]",
                        "in": "query",
                        "description": "Filter by geofence position description, case insensitive, can be partial match",
                        "required": false,
                        "type": "string",
                        "example": "Example street"
                    },
                    {
                        "name": "filter[colour]",
                        "in": "query",
                        "description": "Filter by colour, case insensitive, can be partial match",
                        "required": false,
                        "type": "string",
                        "example": "#ff52"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The current page",
                        "required": false,
                        "type": "integer",
                        "example": 1
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The number of items to display per page",
                        "required": false,
                        "type": "integer",
                        "example": 15
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/geofence_item"
                                    }
                                },
                                "meta": {
                                    "$ref": "#/definitions/meta"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Create a geofence",
                "tags": [
                    "Geofences"
                ],
                "description": "This endpoint creates a geofence",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The json data that needs to be processed",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/create_geofence"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "$ref": "#/definitions/geofence_item"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            }
        },
        "/get_average_moving_clock": {
            "get": {
                "summary": "Get average moving clock",
                "tags": [
                    "Vehicles"
                ],
                "description": "This function returns the average daily driven minutes of all vehicles for given period_days. The period_days is set to maximum 30 days.",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "period_days",
                        "type": "integer",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Result",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "vehicle_id": {
                                        "type": "string"
                                    },
                                    "current_clock_seconds": {
                                        "type": "string"
                                    },
                                    "average_clock_minutes": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/get_average_moving_kms": {
            "get": {
                "summary": "Get average moving kms",
                "tags": [
                    "Vehicles"
                ],
                "description": "This function returns the average daily driven kilometers of all vehicles for given period_days. The period_days is set to maximum 30 days.",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "period_days",
                        "type": "integer",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Result",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "vehicle_id": {
                                        "type": "string"
                                    },
                                    "current_odometer": {
                                        "type": "string"
                                    },
                                    "average_kms": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/get_fuel_details_daily": {
            "get": {
                "summary": "Get fuel details daily",
                "tags": [
                    "Dashboard"
                ],
                "description": "This function will return the daily fuel usage for the user",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "date",
                        "type": "string",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Result",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "event_date": {
                                        "type": "string"
                                    },
                                    "vehicle_id": {
                                        "type": "string"
                                    },
                                    "refuel_count": {
                                        "type": "string"
                                    },
                                    "fuel_usage": {
                                        "type": "string"
                                    },
                                    "fuel_loss_notify_count": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/get_fuel_details_monthly": {
            "get": {
                "summary": "Get fuel details monthly",
                "tags": [
                    "Dashboard"
                ],
                "description": "This function will return the monthly fuel usage for the user. The date format must be YYYYMM.",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "date",
                        "type": "string",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Result",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "event_date": {
                                        "type": "string"
                                    },
                                    "vehicle_id": {
                                        "type": "string"
                                    },
                                    "refuel_count": {
                                        "type": "string"
                                    },
                                    "fuel_usage": {
                                        "type": "string"
                                    },
                                    "fuel_loss_notify_count": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/get_fuel_fills": {
            "get": {
                "summary": "Get fuel fills",
                "tags": [
                    "Vehicles"
                ],
                "description": "This function returns the fuel fills for a given vehicle, and period.",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "registration",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "start_timestamp",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "end_timestamp",
                        "type": "string",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Result",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "registration": {
                                        "type": "string"
                                    },
                                    "vehicle_description": {
                                        "type": "string"
                                    },
                                    "fill_amount_litres": {
                                        "type": "number"
                                    },
                                    "fill_timestamp": {
                                        "type": "string"
                                    },
                                    "fill_location": {
                                        "type": "string"
                                    },
                                    "out_fill_odometer": {
                                        "type": "number"
                                    },
                                    "latitude": {
                                        "type": "number"
                                    },
                                    "longitude": {
                                        "type": "number"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/get_geofence_visits": {
            "get": {
                "summary": "Get geofence visits",
                "tags": [
                    "Geofences"
                ],
                "description": "\r\n<p>This function returns the geofence visits for a given vehicle registration, start time and end time.</p>\r\n<p>\r\n    <em>Example:</em>\r\n    <ul>\r\n        <li><code>registration:</code> <code>ABC1234</code></li>\r\n        <li><code>start_timestamp:</code> <code>2021-09-01 00:00:00</code></li>\r\n        <li><code>end_timestamp:</code> <code>2021-09-10 23:59:59</code></li>\r\n    </ul>\r\n</p>\r\n<p>It is also possible to restrict per subuser, by passing:</p>\r\n<ul>\r\n    <li>If you do not want to limit the results per subuser then pass <code>0</code> inside <code>sub_user_name</code></li>\r\n    <li>Else, please pass the subusername</li>\r\n</ul>\r\n<p>Note: You can manage subusers rights to access admin Geofences on fleetweb, under:</p>\r\n<p><em>Homepage (admin) > Settings > Manage Users > Subuser > Data Access > Geofence</em></p>\r\n<p>By default, a subuser cannot see the admin's geofences, nor the admin cannot see the subuser's geofences.</p>\r\n",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "sub_user_name",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "registration",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "start_timestamp",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "end_timestamp",
                        "type": "string",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Result",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "o_registration": {
                                        "type": "string"
                                    },
                                    "o_make": {
                                        "type": "string"
                                    },
                                    "o_driver": {
                                        "type": "string"
                                    },
                                    "o_geofence_name": {
                                        "type": "string"
                                    },
                                    "o_enter_ts": {
                                        "type": "string"
                                    },
                                    "o_leave_ts": {
                                        "type": "string"
                                    },
                                    "o_visit_duration": {
                                        "type": "number"
                                    },
                                    "o_enter_odo": {
                                        "type": "number"
                                    },
                                    "o_leave_odo": {
                                        "type": "number"
                                    },
                                    "o_visit_distance": {
                                        "type": "number"
                                    },
                                    "o_client_vehicle_description": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/get_geofence_visits_by_id": {
            "get": {
                "summary": "Get geofence visits by id",
                "tags": [
                    "Geofences"
                ],
                "description": "\r\n<p>This function returns the geofence visits for a given geofence id, start time and end time.</p>\r\n<p>You will need to add a vehicle_limit. You can pass either \"All\" to return all vehicles' visits or the desired vehicle_id to return results for that vehicle only.</p>\r\n<p>\r\n    <em>Example with All:</em>\r\n    <ul>\r\n        <li><code>registration:</code> <code>ABC1234</code></li>\r\n        <li><code>vehicle_limit:</code> <code>All</code></li>\r\n        <li><code>start_date:</code> <code>2021-09-01 00:00:00</code></li>\r\n        <li><code>end_date:</code> <code>2021-09-10 23:59:59</code></li>\r\n    </ul>\r\n</p>\r\n<p>\r\n    <em>Example with vehicle_id:</em>\r\n    <ul>\r\n        <li><code>registration:</code> <code>ABC1234</code></li>\r\n        <li><code>vehicle_limit:</code> <code>1234</code></li>\r\n        <li><code>start_date:</code> <code>2021-09-01 00:00:00</code></li>\r\n        <li><code>end_date:</code> <code>2021-09-10 23:59:59</code></li>\r\n    </ul>\r\n</p>\r\n",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "geofence_id",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "vehicle_limit",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "start_date",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "end_date",
                        "type": "string",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Result",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "o_registration": {
                                        "type": "string"
                                    },
                                    "o_make": {
                                        "type": "string"
                                    },
                                    "o_driver": {
                                        "type": "string"
                                    },
                                    "o_geofence_id": {
                                        "type": "string"
                                    },
                                    "o_geofence_name": {
                                        "type": "string"
                                    },
                                    "o_geofence_desc": {
                                        "type": "string"
                                    },
                                    "o_enter_ts": {
                                        "type": "string"
                                    },
                                    "o_leave_ts": {
                                        "type": "string"
                                    },
                                    "o_visit_duration": {
                                        "type": "string"
                                    },
                                    "o_enter_odo": {
                                        "type": "string"
                                    },
                                    "o_leave_odo": {
                                        "type": "string"
                                    },
                                    "o_visit_distance": {
                                        "type": "string"
                                    },
                                    "o_client_vehicle_description": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/get_odo_difference": {
            "get": {
                "summary": "Get odo difference",
                "tags": [
                    "Vehicles"
                ],
                "description": "This function returns odometer difference between 2 timestamps.",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "reg",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "start_ts",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "end_ts",
                        "type": "string",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Result",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "o_registration": {
                                        "type": "string"
                                    },
                                    "o_odo_diff": {
                                        "type": "number"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/get_terminals_configuration_1_io_list": {
            "get": {
                "summary": "Get terminals configuration 1 io list",
                "tags": [
                    "Terminals commands"
                ],
                "description": "This function returns the current configuration (with 1 = ON, 0 = OFF) for the following: \r\n\t<ul>\r\n\t\t<li>Driver identification toggle</li>\r\n\t\t<li>Immobilisation toggle</li>\r\n\t\t<li>Buzzer toggle</li>\r\n\t</ul>\r\nYou can use this endpoint by passing the list of identifiers (comma separated) inside the query param \r\n\"terminal_identifiers\" with either: \r\n\t<ul>\r\n\t\t<li>the vehicles' identification numbers (VIN)</li>\r\n\t\t<li>the Cartrack terminals' serials</li>\r\n\t\t<li>the vehicles' registrations</li>\r\n\t</ul>\r\n<em>Important: All identifiers in the list must be of the same type</em>",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "terminal_identifiers",
                        "type": "string",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Result",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "terminal_identifier": {
                                        "type": "string"
                                    },
                                    "valid_configuration": {
                                        "type": "string"
                                    },
                                    "configuration_ts": {
                                        "type": "string"
                                    },
                                    "did_io": {
                                        "type": "string"
                                    },
                                    "immobilisation_io": {
                                        "type": "string"
                                    },
                                    "buzzer_io": {
                                        "type": "string"
                                    },
                                    "error": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/get_terminals_configuration_9_io_list": {
            "get": {
                "summary": "Get terminals configuration 9 io list",
                "tags": [
                    "Terminals commands"
                ],
                "description": "This function returns the current configuration (with 1 = ON, 0 = OFF) for the following: \n\t<ul>\n\t\t<li>Overspeed buzzer thresholds in km/h</li>\n\t\t<li>Buzzer toggle</li>\n\t</ul>\nYou can use this endpoint by passing the list of identifiers (comma separated) inside the query param \n\"terminal_identifiers\" with either: \n\t<ul>\n\t\t<li>the vehicles' identification numbers (VIN)</li>\n\t\t<li>the Cartrack terminals' serials</li>\n\t\t<li>the vehicles' registrations</li>\n\t</ul>\n<em>Important: All identifiers in the list must be of the same type</em>",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "terminal_identifiers",
                        "type": "string",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Result",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "terminal_identifier": {
                                        "type": "string"
                                    },
                                    "valid_configuration": {
                                        "type": "string"
                                    },
                                    "configuration_ts": {
                                        "type": "string"
                                    },
                                    "overspeed_threshold": {
                                        "type": "string"
                                    },
                                    "overspeed_buzzer": {
                                        "type": "string"
                                    },
                                    "error": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/get_user_alerts": {
            "get": {
                "summary": "Get user alerts",
                "tags": [
                    "User alerts"
                ],
                "description": "This function returns last 300 events for user $1, registration $2 from date $3",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "start_date",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "end_date",
                        "type": "string",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Result",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "trigger_description": {
                                        "type": "string"
                                    },
                                    "event_ts": {
                                        "type": "string"
                                    },
                                    "type": {
                                        "type": "string"
                                    },
                                    "message": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/get_vehicle_alerts": {
            "get": {
                "summary": "Get vehicle alerts",
                "tags": [
                    "Vehicles"
                ],
                "description": "\r\n<p>This function returns the last 300 events for a given registration and over a given period.</p>\r\n",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "registration",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "start_date",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "end_date",
                        "type": "string",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Result",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "trigger_description": {
                                        "type": "string"
                                    },
                                    "event_ts": {
                                        "type": "string"
                                    },
                                    "type": {
                                        "type": "string"
                                    },
                                    "message": {
                                        "type": "string"
                                    },
                                    "position": {
                                        "type": "string"
                                    },
                                    "geofence_id": {
                                        "type": "string"
                                    },
                                    "latitude": {
                                        "type": "string"
                                    },
                                    "longitude": {
                                        "type": "string"
                                    },
                                    "odometer": {
                                        "type": "string"
                                    },
                                    "speed": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/helpdesk/note": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Log a request",
                "tags": [
                    "Helpdesk"
                ],
                "description": "This endpoint logs a request to the Cartrack helpdesk",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The json data that needs to be processed",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/log_helpdesk_request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "$ref": "#/definitions/log_helpdesk_response"
                                },
                                "meta": {
                                    "$ref": "#/definitions/log_helpdesk_meta"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            }
        },
        "/leads": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Create a lead policy",
                "tags": [
                    "Leads"
                ],
                "description": "This endpoint creates a lead's policy for the given user and vehicles. Please make sure you have user's consent before posting the information",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The json data that needs to be processed",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/create_lead_policy"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/lead_policy_item"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            }
        },
        "/mikey/{registration}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Get a vehicle's bluetooth key by registration",
                "tags": [
                    "Mikey"
                ],
                "description": "This endpoint will return the 32 bytes bluetooth key of the vehicle",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "registration",
                        "in": "path",
                        "description": "The vehicle's license plate",
                        "required": true,
                        "type": "string",
                        "example": "ABC1234X"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "$ref": "#/definitions/key"
                                },
                                "meta": {
                                    "type": "object",
                                    "description": "Result",
                                    "required": [
                                        "message"
                                    ],
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Bluetooth key retrieved successfully"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Update a vehicle's mikey code by registration",
                "tags": [
                    "Mikey"
                ],
                "description": "This endpoint sets a random key that locks|unlocks the vehicle",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "registration",
                        "in": "path",
                        "description": "The vehicle's license plate",
                        "required": true,
                        "type": "string",
                        "example": "ABC1234X"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "$ref": "#/definitions/randomisation-request"
                                },
                                "meta": {
                                    "type": "object",
                                    "description": "Result",
                                    "required": [
                                        "message"
                                    ],
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The request to randomise the key for the vehicle registration ABC-12345 is received. The former key will remain active until the new key reaches the device."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            }
        },
        "/mikey": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Get all vehicle's bluetooth keys",
                "tags": [
                    "Mikey"
                ],
                "description": "This endpoint will return the vehicles' 32 bytes bluetooth key for the entire fleet",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "default": 1,
                        "description": "The current page",
                        "required": false,
                        "type": "integer",
                        "example": 1
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "default": 10,
                        "description": "The number of items to display per page",
                        "required": false,
                        "type": "integer",
                        "example": 15
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "required": [
                                            "bluetooth_key",
                                            "terminal_id",
                                            "vehicle_id",
                                            "registration",
                                            "terminal_serial"
                                        ],
                                        "description": "This returns the vehicle's bluetooth key",
                                        "properties": {
                                            "bluetooth_key": {
                                                "type": "string",
                                                "x-nullable": true,
                                                "description": "The 32 bytes bluetooth key.",
                                                "example": "83936874C3404131D645399DFD8BDB36ED9561934D48D6ABCD1F7AD7863627C1"
                                            },
                                            "vehicle": {
                                                "$ref": "#/definitions/mikey-vehicle"
                                            }
                                        }
                                    }
                                },
                                "meta": {
                                    "$ref": "#/definitions/meta"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            }
        },
        "/notifications": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Get your fleet account's notifications",
                "tags": [
                    "Notifications"
                ],
                "description": "Fetch notifications of your account between provided date range. In order to create alerts, please connect to your account `/alerts/feed/fleet-alerts`",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "filter[date_from]",
                        "in": "query",
                        "description": "This will return notifications from this date and time. (limited to <strong>31 days</strong>)",
                        "required": true,
                        "type": "date",
                        "format": "date-time",
                        "example": "2022-01-01 00:00:00"
                    },
                    {
                        "name": "filter[date_to]",
                        "in": "query",
                        "description": "This will return notifications to this date and time. (limited to <strong>31 days</strong>)",
                        "required": true,
                        "type": "date",
                        "format": "date-time",
                        "example": "2022-01-01 23:59:59"
                    },
                    {
                        "name": "filter[registration]",
                        "in": "query",
                        "description": "Filter by vehicle registration",
                        "required": false,
                        "type": "string",
                        "example": "ABCX123"
                    },
                    {
                        "name": "filter[contact_type]",
                        "in": "query",
                        "description": "Filter by contact type",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "E-Mail Message",
                            "Short Message Service",
                            "RSS Feed"
                        ],
                        "example": "E-Mail Message"
                    },
                    {
                        "name": "filter[alert_type]",
                        "in": "query",
                        "description": "Filter alert trigger description",
                        "required": false,
                        "type": "string",
                        "example": "IGNITION_ON_OFF",
                        "enum": [
                            "ROUTE_SLOW_PROGRESS",
                            "ROUTE_DEVIATION",
                            "ROUTE_NOT_ENDED_ON_TIME",
                            "IDLE",
                            "OVERREV",
                            "REMINDERS",
                            "ETOLL_GANTRY",
                            "DYNAMIC_BIT_EVENT",
                            "DRIVER_LICENSE_EXPIRED",
                            "MAX_SPEED_EXCEEDED",
                            "POWER_ON_OFF",
                            "ROUTE_NOT_STARED_WITHIN_TIME",
                            "ROAD_SPEED",
                            "ROUTE_DEVIATION_RETURNED",
                            "ZONE_ARRIVE_DEPART",
                            "SPEEDING",
                            "COOLANT_TEMPERATURE",
                            "ROUTE_DEVIATION_CANCELLED",
                            "GEOFENCE_ENTERING_LEAVING",
                            "ROUTE_START_END",
                            "FUEL_GAIN_LOSS",
                            "UNKOWN_TRIGGER",
                            "STATIC_BIT_EVENT",
                            "AFTER_HOURS_MOVEMENT",
                            "HIGH_RPM",
                            "TRIP_SUMMARY",
                            "HARSH_EVENTS",
                            "STATIONARY",
                            "EXCESSIVE_DRIVING",
                            "TEMPERATURE_DIAGNOSTIC",
                            "SENSORS",
                            "ENGINE_DIAGNOSTIC",
                            "VEHICLE_LICENSE_EXPIRED",
                            "ENGINE_TEMPERATURE",
                            "IGNITION_ON_OFF",
                            "DRIVER_ID",
                            "ARM_ALERT",
                            "RECOVERY",
                            "MOTION"
                        ]
                    },
                    {
                        "name": "filter[status]",
                        "in": "query",
                        "description": "Filter by alert status",
                        "required": false,
                        "type": "string",
                        "example": "Email sent"
                    },
                    {
                        "name": "filter[notification_contact]",
                        "in": "query",
                        "description": "Filter alert by notification contact",
                        "required": false,
                        "type": "string",
                        "example": "mark.steven@example.com"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "default": 1,
                        "description": "The current page",
                        "required": false,
                        "type": "integer",
                        "example": 1
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "default": 10,
                        "maximum": 1000,
                        "description": "The number of items to display per page",
                        "required": false,
                        "type": "integer",
                        "example": 15
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "description": "This array returns the list of notifications",
                                    "items": {
                                        "type": "object",
                                        "required": [
                                            "registration"
                                        ],
                                        "properties": {
                                            "vehicle_id": {
                                                "type": "integer",
                                                "example": 12345,
                                                "description": "The Id of the vehicle"
                                            },
                                            "registration": {
                                                "type": "string",
                                                "example": "ABC1234X",
                                                "description": "The registration of the vehicle"
                                            },
                                            "trigger_description": {
                                                "type": "string",
                                                "example": "IGNITION_ON_OFF",
                                                "description": "The notification alert type",
                                                "enum": [
                                                    "ROUTE_SLOW_PROGRESS",
                                                    "ROUTE_DEVIATION",
                                                    "ROUTE_NOT_ENDED_ON_TIME",
                                                    "IDLE",
                                                    "OVERREV",
                                                    "REMINDERS",
                                                    "ETOLL_GANTRY",
                                                    "DYNAMIC_BIT_EVENT",
                                                    "DRIVER_LICENSE_EXPIRED",
                                                    "MAX_SPEED_EXCEEDED",
                                                    "POWER_ON_OFF",
                                                    "ROUTE_NOT_STARED_WITHIN_TIME",
                                                    "ROAD_SPEED",
                                                    "ROUTE_DEVIATION_RETURNED",
                                                    "ZONE_ARRIVE_DEPART",
                                                    "SPEEDING",
                                                    "COOLANT_TEMPERATURE",
                                                    "ROUTE_DEVIATION_CANCELLED",
                                                    "GEOFENCE_ENTERING_LEAVING",
                                                    "ROUTE_START_END",
                                                    "FUEL_GAIN_LOSS",
                                                    "UNKOWN_TRIGGER",
                                                    "STATIC_BIT_EVENT",
                                                    "AFTER_HOURS_MOVEMENT",
                                                    "HIGH_RPM",
                                                    "TRIP_SUMMARY",
                                                    "HARSH_EVENTS",
                                                    "STATIONARY",
                                                    "EXCESSIVE_DRIVING",
                                                    "TEMPERATURE_DIAGNOSTIC",
                                                    "SENSORS",
                                                    "ENGINE_DIAGNOSTIC",
                                                    "VEHICLE_LICENSE_EXPIRED",
                                                    "ENGINE_TEMPERATURE",
                                                    "IGNITION_ON_OFF",
                                                    "DRIVER_ID",
                                                    "ARM_ALERT",
                                                    "RECOVERY",
                                                    "MOTION"
                                                ]
                                            },
                                            "notification_contact": {
                                                "type": "string",
                                                "example": "mark.steven@example.com",
                                                "description": "The contact information",
                                                "x-nullable": true
                                            },
                                            "contact_description": {
                                                "type": "string",
                                                "example": "E-Mail Message",
                                                "description": "The notification contact method",
                                                "enum": [
                                                    "E-Mail Message",
                                                    "Short Message Service",
                                                    "RSS Feed"
                                                ]
                                            },
                                            "notification_msg": {
                                                "type": "string",
                                                "example": "ABC1234X igition turned off at x timestamp",
                                                "description": "The notification message",
                                                "x-nullable": true
                                            },
                                            "status": {
                                                "type": "string",
                                                "example": "Sent",
                                                "description": "The notification status",
                                                "enum": [
                                                    "Processed",
                                                    "Event too old",
                                                    "Not sent",
                                                    "SMS sent",
                                                    "Alert raised",
                                                    "Email not sent",
                                                    "Email sent",
                                                    "Contact type invalid"
                                                ]
                                            },
                                            "event_ts": {
                                                "type": "string",
                                                "format": "date-time",
                                                "example": "2022-12-01 14:14:10+02",
                                                "description": "The timestamp when the notification was generated"
                                            }
                                        }
                                    }
                                },
                                "meta": {
                                    "$ref": "#/definitions/meta"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            }
        },
        "/pois/{poi_id}": {
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Delete a point of interest (POI)",
                "tags": [
                    "Points of interest"
                ],
                "description": "This endpoint deletes a point of interest (POI)",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "poi_id",
                        "in": "path",
                        "description": "The POI's ID",
                        "required": true,
                        "type": "integer",
                        "example": 12345
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "null",
                                    "description": "Data won't return anything",
                                    "example": null
                                },
                                "meta": {
                                    "type": "object",
                                    "description": "The meta object containing a message",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Successfully deleted the POI."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            },
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Get a point of interest (POI) by id",
                "tags": [
                    "Points of interest"
                ],
                "description": "This endpoint gets a single point of interest (POI) by its id",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "poi_id",
                        "in": "path",
                        "description": "The POI's ID",
                        "required": true,
                        "type": "integer",
                        "example": 12345
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "$ref": "#/definitions/poi_item"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Update a point of interest (POI)",
                "tags": [
                    "Points of interest"
                ],
                "description": "This endpoint updates a point of interest (POI)",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "poi_id",
                        "in": "path",
                        "description": "The POI's ID",
                        "required": true,
                        "type": "integer",
                        "example": 12345
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "One or more of the parameters to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/update_poi"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "$ref": "#/definitions/poi_item"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            }
        },
        "/pois": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Get all points of interest (POIs)",
                "tags": [
                    "Points of interest"
                ],
                "description": "Get all/filtered list of points of interest (POIs)",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "filter[name]",
                        "in": "query",
                        "description": "Filter by POI name, case insensitive, can be partial match",
                        "required": false,
                        "type": "string",
                        "example": "office"
                    },
                    {
                        "name": "filter[description]",
                        "in": "query",
                        "description": "Filter by POI description, case insensitive, can be partial match",
                        "required": false,
                        "type": "string",
                        "example": "home"
                    },
                    {
                        "name": "filter[subuser_id]",
                        "in": "query",
                        "description": "Filter by the subuser/client_user ID",
                        "required": false,
                        "type": "string",
                        "format": "uuid",
                        "example": "7489ff44-xxxx-11eb-xxxx-005056a801ca"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The current page",
                        "required": false,
                        "type": "integer",
                        "example": 1
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The number of items to display per page",
                        "required": false,
                        "type": "integer",
                        "example": 15
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/poi_item"
                                    }
                                },
                                "meta": {
                                    "$ref": "#/definitions/meta"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Add a new point of interest (POI)",
                "tags": [
                    "Points of interest"
                ],
                "description": "This endpoint creates a point of interest (POI)",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The json data that needs to be processed",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/create_poi"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "$ref": "#/definitions/poi_item"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            }
        },
        "/set_terminals_configuration_1_toggle_list": {
            "post": {
                "summary": "Set terminals configuration 1 toggle list",
                "tags": [
                    "Terminals commands"
                ],
                "description": "Please use this function to toggle on/off: \r\n\t<ul>\r\n\t\t<li>the driver identification</li>\r\n\t\t<li>the vehicle immobilisation</li>\r\n\t\t<li>the buzzer</li>\r\n\t</ul> \r\nThe expected values are: ON, OFF, UNCHANGED<br>\r\n\r\nYou can use this endpoints by passing the list of identifiers (comma separated) inside the query param \r\n\"terminal_identifiers\" with either: \r\n\t<ul>\r\n\t\t<li>the vehicles' identification numbers (VIN)</li>\r\n\t\t<li>the Cartrack terminals' serials</li>\r\n\t\t<li>the vehicles' registrations</li>\r\n\t</ul>\r\n<em>Important: All identifiers in the list must be of the same type</em><br><br>\r\nNotice:\r\n\t<ol>\r\n\t\t<li>After making a call, please verify with the function \"get_terminals_configuration_1_io_list\" \r\n\t\tand the returned value \"configuration_ts\" to make sure the configuration is received by \r\n\t\tthe vehicle.</li>\r\n\t\t<li>This endpoint should <ins>not be called more than once every 5 minutes</ins> to prevent\r\n\t\thardware failures.</li>\r\n\t</ol>",
                "consumes": [
                    "multipart/form-data",
                    "application/x-www-form-urlencoded",
                    "application/json"
                ],
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "in": "formData",
                        "name": "terminal_identifiers",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "formData",
                        "name": "did_toggle",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "formData",
                        "name": "immobilisation_toggle",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "formData",
                        "name": "buzzer_toggle",
                        "type": "string",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Result",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "terminal_identifier": {
                                    "type": "string"
                                },
                                "configuration_request_id": {
                                    "type": "string"
                                },
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/set_terminals_configuration_9_toggle_list": {
            "post": {
                "summary": "Set terminals configuration 9 toggle list",
                "tags": [
                    "Terminals commands"
                ],
                "description": "Please use this function to toggle on/off: \n\t<ul>\n\t\t<li>the overspeed buzzer threshold</li>\n\t\t<li>the overspeed buzzer toggle</li> \n\t</ul>\nThe expected values are: ON, OFF, UNCHANGED<br>\n\nYou can use this endpoints by passing the list of identifiers (comma separated) inside the query param \n\"terminal_identifiers\" with either: \n\t<ul>\n\t\t<li>the vehicles' identification numbers (VIN)</li>\n\t\t<li>the Cartrack terminals' serials</li>\n\t\t<li>the vehicles' registrations</li>\n\t</ul>\n<em>Important: All identifiers in the list must be of the same type</em><br><br>\nNotice:\n\t<ol>\n\t\t<li>After making a call, please verify with the function \"get_terminals_configuration_9_io_list\"  \n\t\tand the returned value \"configuration_ts\" to make sure the configuration is received by \n\t\tthe vehicle.</li>\n\t\t<li>This endpoint should <ins>not be called more than once every 5 minutes</ins> to prevent\n\t\thardware failures.</li>\n\t</ol>",
                "consumes": [
                    "multipart/form-data",
                    "application/x-www-form-urlencoded",
                    "application/json"
                ],
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "in": "formData",
                        "name": "terminal_identifiers",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "formData",
                        "name": "overspeed_buzzer",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "formData",
                        "name": "overspeed_threshold",
                        "type": "integer",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Result",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "terminal_identifier": {
                                    "type": "string"
                                },
                                "configuration_request_id": {
                                    "type": "string"
                                },
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/set_vehicle_geofence_alert": {
            "post": {
                "summary": "Set vehicle geofence alert",
                "tags": [
                    "Geofences"
                ],
                "description": "This function sets a geofence alert for a given vehicle_id, latitute and longitude.",
                "consumes": [
                    "multipart/form-data",
                    "application/x-www-form-urlencoded",
                    "application/json"
                ],
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "in": "formData",
                        "name": "vehicle_id",
                        "type": "integer",
                        "required": true
                    },
                    {
                        "in": "formData",
                        "name": "latitude",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "formData",
                        "name": "longitude",
                        "type": "string",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Result",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "o_geofence_id": {
                                    "type": "string"
                                },
                                "o_registration": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/set_vehicle_immobilise_status": {
            "post": {
                "summary": "Set vehicle immobilise status",
                "tags": [
                    "Vehicles commands"
                ],
                "description": "This function allows to immobilise or release a vehicle. Set command to \"DISABLE-IGNITION\" if you want to immobilize the vehicle. Set command to \"ENABLE-IGNITION\" if you want to release the vehicle.",
                "consumes": [
                    "multipart/form-data",
                    "application/x-www-form-urlencoded",
                    "application/json"
                ],
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "in": "formData",
                        "name": "registration",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "formData",
                        "name": "command",
                        "type": "string",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Result",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "sp_immobilise_command": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/set_vehicle_lock_unlock_status": {
            "post": {
                "summary": "Set vehicle lock unlock status",
                "tags": [
                    "Vehicles commands"
                ],
                "description": "This function allows to lock or unlock a vehicle for a given vehicle registration. Set command to \"UNLOCK\" to unlock the vehicle. Set command to \"LOCK\" to lock the vehicle. Please note that this command can take some time to reach the vehicle.",
                "consumes": [
                    "multipart/form-data",
                    "application/x-www-form-urlencoded",
                    "application/json"
                ],
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "in": "formData",
                        "name": "registration",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "formData",
                        "name": "command",
                        "type": "string",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Result",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "sp_lock_unlock_command": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/subusers": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Get all subusers",
                "tags": [
                    "Subusers"
                ],
                "description": "This endpoint returns all the subusers of your account",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The current page",
                        "required": false,
                        "type": "integer",
                        "example": 1
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The number of items to display per page",
                        "required": false,
                        "type": "integer",
                        "example": 15
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/subusers"
                                    }
                                },
                                "meta": {
                                    "$ref": "#/definitions/meta"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            }
        },
        "/subusers/login-history": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Get subusers login history",
                "tags": [
                    "Subusers"
                ],
                "description": "This endpoint returns all the subusers of login history",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "filter[date_from]",
                        "in": "query",
                        "description": "The date where filtering will start",
                        "required": true,
                        "type": "datetime",
                        "example": "2022-07-29 00:00:00"
                    },
                    {
                        "name": "filter[date_to]",
                        "in": "query",
                        "description": "The date where filtering will end",
                        "required": true,
                        "type": "datetime",
                        "example": "2022-08-01 23:59:59"
                    },
                    {
                        "name": "filter[subuser_id]",
                        "in": "query",
                        "description": "The subuser id",
                        "required": false,
                        "type": "string",
                        "format": "uuid",
                        "example": "544ecaf4-fc35-11ec-9059-506b8db42dc2"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The current page",
                        "required": false,
                        "type": "integer",
                        "example": 1
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The number of items to display per page",
                        "required": false,
                        "type": "integer",
                        "example": 15
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/subusers-login-history"
                                    }
                                },
                                "meta": {
                                    "$ref": "#/definitions/meta"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            }
        },
        "/trips": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Get all trips",
                "tags": [
                    "Trips"
                ],
                "description": "This endpoint returns all the trips of your account between provided date range",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "start_timestamp",
                        "in": "query",
                        "description": "This will return trips from this date and time",
                        "required": true,
                        "type": "timestamp",
                        "example": "2022-01-01 00:00:00"
                    },
                    {
                        "name": "end_timestamp",
                        "in": "query",
                        "description": "This will return trips to this date and time<br><br>\r\n                The lookup period is of maximum 1 month between the start_timestamp and the end_timestamp\r\n            ",
                        "required": true,
                        "type": "timestamp",
                        "example": "2022-01-01 23:59:59"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "default": 1,
                        "description": "The current page",
                        "required": false,
                        "type": "integer",
                        "example": 1
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "default": 10,
                        "description": "The number of items to display per page",
                        "required": false,
                        "type": "integer",
                        "example": 15
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "description": "This array returns the list of trips",
                                    "items": {
                                        "type": "object",
                                        "required": [
                                            "vehicle_id",
                                            "registration",
                                            "terminal_id",
                                            "terminal_serial"
                                        ],
                                        "properties": {
                                            "vehicle_id": {
                                                "type": "integer",
                                                "description": "The id of the vehicle",
                                                "example": 12345
                                            },
                                            "registration": {
                                                "type": "string",
                                                "description": "The license plate of the vehicle",
                                                "example": "ABC1234X"
                                            },
                                            "terminal_id": {
                                                "type": "integer",
                                                "description": "The id of the terminal installed in the vehicle",
                                                "example": 456789
                                            },
                                            "terminal_serial": {
                                                "type": "string",
                                                "example": "CTEF456S",
                                                "description": "The serial of the Cartrack terminal"
                                            },
                                            "start_timestamp": {
                                                "type": "timestamp",
                                                "x-nullable": true,
                                                "example": "2022-01-01 12:00:01",
                                                "description": "The date and time of the earliest trip"
                                            },
                                            "end_timestamp": {
                                                "type": "timestamp",
                                                "example": "2022-01-01 12:00:01",
                                                "x-nullable": true,
                                                "description": "The date and time of the latest trip"
                                            },
                                            "trip_duration": {
                                                "type": "timestamp",
                                                "example": "00:20:11",
                                                "x-nullable": true,
                                                "description": "Duration of the trip"
                                            },
                                            "start_location": {
                                                "type": "string",
                                                "example": "LOCATION X",
                                                "x-nullable": true,
                                                "description": "The start location of the trip"
                                            },
                                            "end_location": {
                                                "type": "string",
                                                "example": "LOCATION Y",
                                                "x-nullable": true,
                                                "description": "The end location of the trip"
                                            },
                                            "start_odometer": {
                                                "type": "integer",
                                                "example": 10100,
                                                "x-nullable": true,
                                                "description": "Odometer reading at the start of trip"
                                            },
                                            "end_odometer": {
                                                "type": "integer",
                                                "example": 10230,
                                                "x-nullable": true,
                                                "description": "Odometer reading at the end of trip"
                                            },
                                            "trip_distance": {
                                                "type": "integer",
                                                "example": 130,
                                                "x-nullable": true,
                                                "description": "Distance of the trip in meters"
                                            },
                                            "start_geofence_name": {
                                                "type": "string",
                                                "example": "GEOFENCE NAME A",
                                                "x-nullable": true,
                                                "description": "Name of geofence where trip started"
                                            },
                                            "end_geofence_name": {
                                                "type": "string",
                                                "example": "GEOFENCE NAME B",
                                                "x-nullable": true,
                                                "description": "Name of geofence where trip ended"
                                            },
                                            "clock_start": {
                                                "type": "integer",
                                                "example": 1200,
                                                "x-nullable": true,
                                                "description": "Reading on clock when trip started"
                                            },
                                            "clock_end": {
                                                "type": "integer",
                                                "example": 1303,
                                                "x-nullable": true,
                                                "description": "Reading on clock when trip ended"
                                            },
                                            "thresholds_speeding_events": {
                                                "type": "integer",
                                                "example": 2,
                                                "x-nullable": true,
                                                "description": "Number of threshold speeding events"
                                            },
                                            "road_speeding_events": {
                                                "type": "integer",
                                                "example": 5,
                                                "x-nullable": true,
                                                "description": "Number of road speeding events"
                                            },
                                            "max_speed": {
                                                "type": "integer",
                                                "example": 4,
                                                "x-nullable": true,
                                                "description": "Maximum speed reached during trip"
                                            },
                                            "harsh_braking_events": {
                                                "type": "integer",
                                                "example": 1,
                                                "x-nullable": true,
                                                "description": "Number of harsh braking events"
                                            },
                                            "harsh_cornering_events": {
                                                "type": "integer",
                                                "example": 0,
                                                "x-nullable": true,
                                                "description": "Number of harsh cornering events"
                                            },
                                            "harsh_acceleration_events": {
                                                "type": "integer",
                                                "example": 2,
                                                "x-nullable": true,
                                                "description": "Number of harsh acceleration events"
                                            },
                                            "idle_time": {
                                                "type": "timestamp",
                                                "example": "00:20:11",
                                                "x-nullable": true,
                                                "description": "Total time vehicle was idling"
                                            },
                                            "events_idle": {
                                                "type": "integer",
                                                "example": 3,
                                                "x-nullable": true,
                                                "description": "Events idle"
                                            },
                                            "driver_id": {
                                                "type": "string",
                                                "example": "f3a42187-0c6e-11ec-aa41-a4bf016cd6b2",
                                                "x-nullable": true,
                                                "description": "The id of the driver"
                                            },
                                            "driver_name": {
                                                "type": "string",
                                                "example": "Donald Smith",
                                                "x-nullable": true,
                                                "description": "The name of the driver"
                                            },
                                            "identification_tag_id": {
                                                "type": "uuid",
                                                "example": "7489ff44-xxxx-11eb-xxxx-005056a801ca",
                                                "x-nullable": true,
                                                "description": "Tag ID"
                                            },
                                            "driver_tag_description": {
                                                "type": "string",
                                                "example": "Donald's Tag ID",
                                                "x-nullable": true,
                                                "description": "Driver tag description"
                                            },
                                            "trip_title": {
                                                "type": "string",
                                                "example": "Delivery",
                                                "default": "null",
                                                "x-nullable": true,
                                                "description": "Trip title"
                                            },
                                            "trip_extra_notes": {
                                                "type": "string",
                                                "example": "Deliver package A to customer X",
                                                "default": "null",
                                                "x-nullable": true,
                                                "description": "Trip extra notes"
                                            },
                                            "trip_type": {
                                                "type": "string",
                                                "example": "Business",
                                                "x-nullable": true,
                                                "default": "null",
                                                "enum": [
                                                    "None",
                                                    "Business",
                                                    "Private"
                                                ],
                                                "description": "Trip type"
                                            }
                                        }
                                    }
                                },
                                "meta": {
                                    "$ref": "#/definitions/meta"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            }
        },
        "/trips/{registration}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Get trips by registration",
                "tags": [
                    "Trips"
                ],
                "description": "This endpoint returns all the trips of a vehicle between provided date range",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "start_timestamp",
                        "in": "query",
                        "description": "This will return trips from this date and time",
                        "required": true,
                        "type": "timestamp",
                        "example": "2022-01-01 00:00:00"
                    },
                    {
                        "name": "end_timestamp",
                        "in": "query",
                        "description": "This will return trips to this date and time<br><br>\r\n                The lookup period is of maximum 1 month between the start_timestamp and the end_timestamp\r\n            ",
                        "required": true,
                        "type": "timestamp",
                        "example": "2022-01-01 23:59:59"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "default": 1,
                        "description": "The current page",
                        "required": false,
                        "type": "integer",
                        "example": 1
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "default": 10,
                        "description": "The number of items to display per page",
                        "required": false,
                        "type": "integer",
                        "example": 15
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "description": "This array returns the list of trips",
                                    "items": {
                                        "type": "object",
                                        "required": [
                                            "vehicle_id",
                                            "registration",
                                            "terminal_id",
                                            "terminal_serial"
                                        ],
                                        "properties": {
                                            "vehicle_id": {
                                                "type": "integer",
                                                "description": "The id of the vehicle",
                                                "example": 12345
                                            },
                                            "registration": {
                                                "type": "string",
                                                "description": "The license plate of the vehicle",
                                                "example": "ABC1234X"
                                            },
                                            "terminal_id": {
                                                "type": "integer",
                                                "description": "The id of the terminal installed in the vehicle",
                                                "example": 456789
                                            },
                                            "terminal_serial": {
                                                "type": "string",
                                                "example": "CTEF456S",
                                                "description": "The serial of the Cartrack terminal"
                                            },
                                            "start_timestamp": {
                                                "type": "timestamp",
                                                "x-nullable": true,
                                                "example": "2022-01-01 12:00:01",
                                                "description": "The date and time of the earliest trip"
                                            },
                                            "end_timestamp": {
                                                "type": "timestamp",
                                                "example": "2022-01-01 12:00:01",
                                                "x-nullable": true,
                                                "description": "The date and time of the latest trip"
                                            },
                                            "trip_duration": {
                                                "type": "timestamp",
                                                "example": "00:20:11",
                                                "x-nullable": true,
                                                "description": "Duration of the trip"
                                            },
                                            "start_location": {
                                                "type": "string",
                                                "example": "LOCATION X",
                                                "x-nullable": true,
                                                "description": "The start location of the trip"
                                            },
                                            "end_location": {
                                                "type": "string",
                                                "example": "LOCATION Y",
                                                "x-nullable": true,
                                                "description": "The end location of the trip"
                                            },
                                            "start_odometer": {
                                                "type": "integer",
                                                "example": 10100,
                                                "x-nullable": true,
                                                "description": "Odometer reading at the start of trip"
                                            },
                                            "end_odometer": {
                                                "type": "integer",
                                                "example": 10230,
                                                "x-nullable": true,
                                                "description": "Odometer reading at the end of trip"
                                            },
                                            "trip_distance": {
                                                "type": "integer",
                                                "example": 130,
                                                "x-nullable": true,
                                                "description": "Distance of the trip in meters"
                                            },
                                            "start_geofence_name": {
                                                "type": "string",
                                                "example": "GEOFENCE NAME A",
                                                "x-nullable": true,
                                                "description": "Name of geofence where trip started"
                                            },
                                            "end_geofence_name": {
                                                "type": "string",
                                                "example": "GEOFENCE NAME B",
                                                "x-nullable": true,
                                                "description": "Name of geofence where trip ended"
                                            },
                                            "clock_start": {
                                                "type": "integer",
                                                "example": 1200,
                                                "x-nullable": true,
                                                "description": "Reading on clock when trip started"
                                            },
                                            "clock_end": {
                                                "type": "integer",
                                                "example": 1303,
                                                "x-nullable": true,
                                                "description": "Reading on clock when trip ended"
                                            },
                                            "thresholds_speeding_events": {
                                                "type": "integer",
                                                "example": 2,
                                                "x-nullable": true,
                                                "description": "Number of threshold speeding events"
                                            },
                                            "road_speeding_events": {
                                                "type": "integer",
                                                "example": 5,
                                                "x-nullable": true,
                                                "description": "Number of road speeding events"
                                            },
                                            "max_speed": {
                                                "type": "integer",
                                                "example": 4,
                                                "x-nullable": true,
                                                "description": "Maximum speed reached during trip"
                                            },
                                            "harsh_braking_events": {
                                                "type": "integer",
                                                "example": 1,
                                                "x-nullable": true,
                                                "description": "Number of harsh braking events"
                                            },
                                            "harsh_cornering_events": {
                                                "type": "integer",
                                                "example": 0,
                                                "x-nullable": true,
                                                "description": "Number of harsh cornering events"
                                            },
                                            "harsh_acceleration_events": {
                                                "type": "integer",
                                                "example": 2,
                                                "x-nullable": true,
                                                "description": "Number of harsh acceleration events"
                                            },
                                            "idle_time": {
                                                "type": "timestamp",
                                                "example": "00:20:11",
                                                "x-nullable": true,
                                                "description": "Total time vehicle was idling"
                                            },
                                            "events_idle": {
                                                "type": "integer",
                                                "example": 3,
                                                "x-nullable": true,
                                                "description": "Events idle"
                                            },
                                            "driver_id": {
                                                "type": "string",
                                                "example": "f3a42187-0c6e-11ec-aa41-a4bf016cd6b2",
                                                "x-nullable": true,
                                                "description": "The id of the driver"
                                            },
                                            "driver_name": {
                                                "type": "string",
                                                "example": "Donald Smith",
                                                "x-nullable": true,
                                                "description": "The name of the driver"
                                            },
                                            "identification_tag_id": {
                                                "type": "uuid",
                                                "example": "7489ff44-xxxx-11eb-xxxx-005056a801ca",
                                                "x-nullable": true,
                                                "description": "Tag ID"
                                            },
                                            "driver_tag_description": {
                                                "type": "string",
                                                "example": "Donald's Tag ID",
                                                "x-nullable": true,
                                                "description": "Driver tag description"
                                            },
                                            "trip_title": {
                                                "type": "string",
                                                "example": "Delivery",
                                                "default": "null",
                                                "x-nullable": true,
                                                "description": "Trip title"
                                            },
                                            "trip_extra_notes": {
                                                "type": "string",
                                                "example": "Deliver package A to customer X",
                                                "default": "null",
                                                "x-nullable": true,
                                                "description": "Trip extra notes"
                                            },
                                            "trip_type": {
                                                "type": "string",
                                                "example": "Business",
                                                "x-nullable": true,
                                                "default": "null",
                                                "enum": [
                                                    "None",
                                                    "Business",
                                                    "Private"
                                                ],
                                                "description": "Trip type"
                                            }
                                        }
                                    }
                                },
                                "meta": {
                                    "$ref": "#/definitions/meta"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            }
        },
        "/vehicles/activity": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Get all vehicles' activity",
                "tags": [
                    "Vehicles"
                ],
                "description": "This endpoints returns all of your your vehicles' total activity and break time for a given day",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "filter[registration]",
                        "in": "query",
                        "description": "This will filter results for a given vehicle registration",
                        "required": false,
                        "type": "string",
                        "example": "ABC1234X"
                    },
                    {
                        "name": "filter[date]",
                        "in": "query",
                        "description": "This will filter results for the given date",
                        "required": true,
                        "type": "string",
                        "example": "2022-07-01"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "$ref": "#/definitions/vehicle_activity"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            }
        },
        "/vehicles/{registration}/custom-fields": {
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Delete vehicle custom fields",
                "tags": [
                    "Vehicles"
                ],
                "description": "Delete a vehicle's custom fields values and labels",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "registration",
                        "in": "path",
                        "description": "The vehicle's license plate",
                        "required": true,
                        "type": "string",
                        "example": "ABC1234X"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "string",
                                    "example": null
                                },
                                "meta": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Successfully deleted vehicle custom fields."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            },
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Get vehicle's custom fields",
                "tags": [
                    "Vehicles"
                ],
                "description": "Get a vehicle's custom fields values and labels",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "registration",
                        "in": "path",
                        "description": "The vehicle's license plate",
                        "required": true,
                        "type": "string",
                        "example": "ABC1234X"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/vehicle_custom_fields_items"
                                    },
                                    "description": "Limited to 8 custom fields per vahicle"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Update vehicle's custom fields",
                "tags": [
                    "Vehicles"
                ],
                "description": "Updates a vehicle's custom fields an alias for PUT:vehicles/{registration}/custom-fields.",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": null,
                "responses": null
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Update vehicle custom fields",
                "tags": [
                    "Vehicles"
                ],
                "description": "Updates a vehicle's custom fields and labels.",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "registration",
                        "in": "path",
                        "description": "The vehicle's license plate",
                        "required": true,
                        "type": "string",
                        "example": "ABC1234X"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The json data that needs to be processed",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "items": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/vehicle_custom_fields_items"
                                    }
                                }
                            },
                            "description": "One to eight custom fields for the vahicle"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/vehicle_custom_fields_items"
                                    },
                                    "description": "Limited to 8 custom fields per vahicle"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            }
        },
        "/vehicles/events": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Get events for all vehicles",
                "tags": [
                    "Vehicles"
                ],
                "description": "This endpoint returns the events for the given dates (YYYY-MM-DD hh:mm:ss) for account vehicles: <br>Start and end timestamp range is limited up to <strong>24 hours</strong> only.",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "start_timestamp",
                        "in": "query",
                        "description": "The earliest date and time to retrieve events. (limited to <strong>24 hours</strong>)",
                        "required": true,
                        "type": "string",
                        "format": "date-time",
                        "example": "2022-05-05 00:00:00"
                    },
                    {
                        "name": "end_timestamp",
                        "in": "query",
                        "description": "The latest date and time to retrieve events. (limited to <strong>24 hours</strong>)",
                        "required": true,
                        "type": "string",
                        "format": "date-time",
                        "example": "2022-05-05 23:59:59"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The current page",
                        "required": false,
                        "type": "integer",
                        "example": 1
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The number of items to display per page",
                        "required": false,
                        "type": "integer",
                        "maximum": 1000,
                        "example": 15
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/vehicle_events_all"
                                    }
                                },
                                "meta": {
                                    "$ref": "#/definitions/meta"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            }
        },
        "/vehicles/{registration}/events": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Get events for one vehicle",
                "tags": [
                    "Vehicles"
                ],
                "description": "This endpoint returns the events for the given dates (YYYY-MM-DD hh:mm:ss) for a given registration",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "registration",
                        "in": "path",
                        "description": "The vehicle's registration",
                        "required": true,
                        "type": "string",
                        "example": "ABC-12345"
                    },
                    {
                        "name": "start_timestamp",
                        "in": "query",
                        "description": "The earliest date and time to retrieve events (limited to <strong>31 days</strong>)",
                        "required": true,
                        "type": "string",
                        "format": "date-time",
                        "example": "2022-05-05 00:00:00"
                    },
                    {
                        "name": "end_timestamp",
                        "in": "query",
                        "description": "The latest date and time to retrieve events. (limited to <strong>31 days</strong>)",
                        "required": true,
                        "type": "string",
                        "format": "date-time",
                        "example": "2022-05-05 23:59:59"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The current page",
                        "required": false,
                        "type": "integer",
                        "example": 1
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The number of items to display per page",
                        "required": false,
                        "type": "integer",
                        "maximum": 1000,
                        "example": 15
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/vehicle_events"
                                    }
                                },
                                "meta": {
                                    "$ref": "#/definitions/meta"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            }
        },
        "/vehicles/groups/{group_id}": {
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Delete a vehicle group",
                "tags": [
                    "Vehicle Groups"
                ],
                "description": "Deletes a vehicle group",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "group_id",
                        "in": "path",
                        "description": "The vehicle group ID ",
                        "required": true,
                        "type": "integer",
                        "example": 1010
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "string",
                                    "example": null
                                },
                                "meta": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Successfully deleted the group."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Update a vehicle group",
                "tags": [
                    "Vehicle Groups"
                ],
                "description": "Updates a vehicle group",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "group_id",
                        "in": "path",
                        "description": "The vehicle group ID ",
                        "required": true,
                        "type": "integer",
                        "example": 1010
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "One or more of the parameters to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/update_vehicle_group"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "object",
                                    "properties": {
                                        "group_id": {
                                            "type": "integer",
                                            "description": "The id of the newly created group",
                                            "example": 12345
                                        },
                                        "name": {
                                            "type": "string",
                                            "description": "The name of the newly created group",
                                            "example": "Group of old vehicles"
                                        },
                                        "description": {
                                            "type": "string",
                                            "description": "The description of the newly created group",
                                            "example": "These vehicles were manufactured before 1991"
                                        },
                                        "subuser_id": {
                                            "type": "UUID",
                                            "description": "The subuser_id associated to this newly created vehicle",
                                            "example": "7489ff44-xxxx-11eb-xxxx-005056a801ca"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            }
        },
        "/vehicles/groups": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Get vehicle groups",
                "tags": [
                    "Vehicle Groups"
                ],
                "description": "Get vehicle groups",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "filter[registration]",
                        "in": "query",
                        "description": "Filter vehicle registration, case insensitive, can be partial match",
                        "required": false,
                        "type": "string",
                        "example": "GRG123"
                    },
                    {
                        "name": "filter[name]",
                        "in": "query",
                        "description": "Filter by group name, case insensitive, can be partial match",
                        "required": false,
                        "type": "string",
                        "example": "Good looking vehicles"
                    },
                    {
                        "name": "filter[description]",
                        "in": "query",
                        "description": "Filter by group description, case insensitive, can be partial match",
                        "required": false,
                        "type": "string",
                        "example": "All active vehicles"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The current page",
                        "required": false,
                        "type": "integer",
                        "example": 1
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The number of items to display per page",
                        "required": false,
                        "type": "integer",
                        "example": 10
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/vehicle_group_item"
                                    }
                                },
                                "meta": {
                                    "$ref": "#/definitions/meta"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Create a vehicle group",
                "tags": [
                    "Vehicle Groups"
                ],
                "description": "Creates a vehicle group",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "One or more of the parameters to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/create_vehicle_group"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "object",
                                    "properties": {
                                        "group_id": {
                                            "type": "integer",
                                            "description": "The id of the newly created group",
                                            "example": 12345
                                        },
                                        "name": {
                                            "type": "string",
                                            "description": "The name of the newly created group",
                                            "example": "Good looking vehicles"
                                        },
                                        "description": {
                                            "type": "string",
                                            "description": "The description of the newly created group",
                                            "example": "This group gathers good looking vehicles"
                                        },
                                        "subuser_id": {
                                            "type": "UUID",
                                            "description": "The subuser_id associated to this newly created vehicle",
                                            "example": "7489ff44-xxxx-11eb-xxxx-005056a801ca"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            }
        },
        "/vehicles/{registration}/groups/{group_id}": {
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Delete vehicle from group",
                "tags": [
                    "Vehicle Groups"
                ],
                "description": "Deletes a vehicle from a group",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "registration",
                        "in": "path",
                        "description": "The vehicle's registration",
                        "required": true,
                        "type": "string",
                        "example": "ABX123"
                    },
                    {
                        "name": "group_id",
                        "in": "path",
                        "description": "The vehicle group ID ",
                        "required": true,
                        "type": "integer",
                        "example": 1010
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "string",
                                    "example": null
                                },
                                "meta": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Successfully deleted the vehicle from the group."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Add vehicle to group",
                "tags": [
                    "Vehicle Groups"
                ],
                "description": "Adds a vehicle to a vehicle group",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "registration",
                        "in": "path",
                        "description": "The vehicle's registration",
                        "required": true,
                        "type": "string",
                        "example": "ABX123"
                    },
                    {
                        "name": "group_id",
                        "in": "path",
                        "description": "The vehicle group ID ",
                        "required": true,
                        "type": "integer",
                        "example": 1010
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "string",
                                    "example": null
                                },
                                "meta": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Successfully added the vehicle to the group."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            }
        },
        "/vehicles": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Get all vehicles",
                "tags": [
                    "Vehicles"
                ],
                "description": "This endpoint returns all/filtered list of vehicles",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "filter[vehicle_id]",
                        "in": "query",
                        "description": "Filter by vehicle ID",
                        "required": false,
                        "type": "integer",
                        "example": "12345"
                    },
                    {
                        "name": "filter[registration]",
                        "in": "query",
                        "description": "Filter vehicle registration, case insensitive, can be partial match",
                        "required": false,
                        "type": "string",
                        "example": "GRG123"
                    },
                    {
                        "name": "filter[manufacturer]",
                        "in": "query",
                        "description": "Filter by vehicle make, case insensitive, can be partial match",
                        "required": false,
                        "type": "string",
                        "example": "Toyota"
                    },
                    {
                        "name": "filter[model_year]",
                        "in": "query",
                        "description": "Filter vehicle model year",
                        "required": false,
                        "type": "integer",
                        "minimum": 1922,
                        "maximum": 2023,
                        "example": "2022"
                    },
                    {
                        "name": "filter[colour]",
                        "in": "query",
                        "description": "Filter by vehicle colour, case insensitive, can be partial match",
                        "required": false,
                        "type": "string",
                        "example": "red"
                    },
                    {
                        "name": "filter[chassis_number]",
                        "in": "query",
                        "description": "Filter by chassis number, case insensitive, can be partial match",
                        "required": false,
                        "type": "string",
                        "example": "RGJ123"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The current page",
                        "required": false,
                        "type": "integer",
                        "example": 1
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The number of items to display per page",
                        "required": false,
                        "type": "integer",
                        "example": 15
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/vehicle_item"
                                    }
                                },
                                "meta": {
                                    "$ref": "#/definitions/meta"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            }
        },
        "/vehicles/nearest": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Get vehicles nearest to point",
                "tags": [
                    "Vehicles"
                ],
                "description": "Get the nearest vehicles for a given latitude, longitude, radius (meters)",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "longitude",
                        "in": "query",
                        "description": "The longitude",
                        "required": true,
                        "type": "float",
                        "example": 103.123456
                    },
                    {
                        "name": "latitude",
                        "in": "query",
                        "description": "This latitude",
                        "required": true,
                        "type": "float",
                        "example": 1.345877
                    },
                    {
                        "name": "filter[max_distance]",
                        "in": "query",
                        "description": "The radius",
                        "required": false,
                        "default": 100,
                        "type": "integer",
                        "example": 100
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "description": "This array returns the list of vehicles",
                                    "items": {
                                        "type": "object",
                                        "required": [
                                            "vehicle_id",
                                            "registration"
                                        ],
                                        "properties": {
                                            "vehicle_id": {
                                                "type": "integer",
                                                "description": "The id of the vehicle",
                                                "example": 12345
                                            },
                                            "registration": {
                                                "type": "string",
                                                "description": "The license plate of the vehicle",
                                                "example": "ABC1234X"
                                            },
                                            "location_updated": {
                                                "type": "string",
                                                "format": "date-time",
                                                "description": "The updated location date & time",
                                                "example": "2022-01-30 00:49:24"
                                            },
                                            "distance_meters": {
                                                "type": "float",
                                                "example": 1.5,
                                                "description": "The distance in meters"
                                            },
                                            "driver": {
                                                "title": "driver object",
                                                "type": "object",
                                                "description": "The driver if associated with the tag ID",
                                                "properties": {
                                                    "driver_id": {
                                                        "type": "string",
                                                        "format": "uuid",
                                                        "example": "667e1124-xxxx-11eb-xxxx-005056a801ca",
                                                        "description": "The driver's ID"
                                                    },
                                                    "first_name": {
                                                        "type": "string",
                                                        "description": "The driver's first name",
                                                        "example": "Joe"
                                                    },
                                                    "last_name": {
                                                        "type": "string",
                                                        "x-nullable": true,
                                                        "description": "The driver's last name",
                                                        "example": "Blogs"
                                                    },
                                                    "phone_number": {
                                                        "type": "string",
                                                        "x-nullable": true,
                                                        "description": "The driver's phone number",
                                                        "example": "27659700000"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            }
        },
        "/vehicles/{registration}/power-takeoff": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Get vehicle's power-takeoff events by registration",
                "tags": [
                    "Vehicles"
                ],
                "description": "This endpoint returns the events when a vehicle's power take-off was active or inactive.\r\n    You can measure the active time of your vehicles. These vehicles are:\r\n    <ul>\r\n        <li>Running a water pump on a fire engine or water truck</li>\r\n        <li>Running a truck mounted hot water extraction machine for carpet cleaning (driving vacuum blower and high-pressure solution pumps)</li>\r\n        <li>Powering a blower system used to move dry materials such as cement</li>\r\n        <li>Powering a vehicle-integrated air compressor system[10]</li>\r\n        <li>Raising a dump truck bed</li>\r\n        <li>Operating the mechanical arm on a bucket truck used by electrical maintenance personnel or cable TV maintenance crews</li>\r\n        <li>Operating a winch on a tow truck</li>\r\n        <li>Operating the compactor on a garbage truck</li>\r\n        <li>Operating a Boom/Grapple truck</li>\r\n        <li>Operating a truck mounted tree spade and lift-mast assembly</li>\r\n    <ul>\r\n    ",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "registration",
                        "in": "path",
                        "description": "The vehicle's license plate",
                        "required": true,
                        "type": "string",
                        "example": "ABC1234X"
                    },
                    {
                        "name": "start_date",
                        "in": "query",
                        "description": "The earliest date and time to retrieve events",
                        "required": false,
                        "type": "string",
                        "example": "2022-05-05 00:00:00"
                    },
                    {
                        "name": "end_date",
                        "in": "query",
                        "description": "The latest date and time to retrieve events",
                        "required": false,
                        "type": "string",
                        "example": "2022-05-05 23:59:59"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The current page",
                        "required": false,
                        "type": "integer",
                        "example": 1
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The number of items to display per page",
                        "required": false,
                        "type": "integer",
                        "example": 15
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "description": "The list of events generated during that period",
                                    "items": {
                                        "$ref": "#/definitions/vehicle_power_takeoff"
                                    }
                                },
                                "meta": {
                                    "$ref": "#/definitions/meta"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            }
        },
        "/vehicles/{registration}/risk": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Update a vehicle's risk",
                "tags": [
                    "Know the driver"
                ],
                "description": "This endpoint updates the vehicle's risk.",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The json data that needs to be processed",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/update_risk"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "required": [],
                            "properties": {
                                "data": {
                                    "type": "object",
                                    "properties": {
                                        "registration": {
                                            "type": "string",
                                            "description": "The license plate of the vehicle",
                                            "example": "ABC1234X"
                                        }
                                    }
                                },
                                "meta": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Successfully updated the risk of the vehicle."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            }
        },
        "/vehicles/risk": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Update multiple vehicle's risk.",
                "tags": [
                    "Know the driver"
                ],
                "description": "This endpoint updates multiple vehicle's risk.",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The json data that needs to be processed",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/update_risk_multi"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "required": [],
                            "properties": {
                                "data": {
                                    "type": "object",
                                    "properties": {
                                        "registrations": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "example": [
                                                "ABC-12345",
                                                "ABC-456789"
                                            ]
                                        }
                                    }
                                },
                                "meta": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Successfully updated the risk."
                                        },
                                        "result": {
                                            "properties": {
                                                "success": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "ABC-12345"
                                                    }
                                                },
                                                "failure": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "ABC-456789"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            }
        },
        "/vehicles/status": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "Fetch your vehicles's most recent status",
                "tags": [
                    "Vehicles"
                ],
                "description": "Get a glance at your vehicles's most recent status, including fuel, location, driver and other telematic data.",
                "security": [
                    {
                        "Basic Authentication": []
                    }
                ],
                "parameters": [
                    {
                        "name": "filter[registration]",
                        "in": "query",
                        "description": "The vehicle's license plate",
                        "required": false,
                        "type": "string",
                        "example": "ABC1234X"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/vehicle_status"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "422": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    },
                    "500": {
                        "description": "Application error",
                        "schema": {
                            "$ref": "#/definitions/http_error"
                        }
                    }
                }
            }
        }
    },
    "securityDefinitions": {
        "Basic Authentication": {
            "type": "basic",
            "description": "The Cartrack Fleet API uses a Basic Authentication method that must be placed in the header. <br><br>For instance, if the administrator account's username is <span style=\"color:grey;font:Courrier New\">ABCD00001</span> and the token is <br> <span style=\"color:grey;font:Courrier New\">ddd0e192a5a91d47fe2bc0c897002059304bec87755d95ab28ccaf467e31f8aa</span><br> then your authorization header should have the following format:<br>\n                    <pre>--header \\`Authorization: Basic ${btoa('username:token')}\\`</pre><br>\n                    With our examples, our headers becomes:<br>\n                    <pre>--header 'Authorization: Basic QUJDRDAwMDAxOmRkZDBlMTkyYTVhOTFkNDdmZTJiYzBjODk3MDAyMDU5MzA0YmVjODc3NTVkOTVhYjI4Y2NhZjQ2N2UzMWY4YWE='</pre><br>\n                    Find out more on how to generate the token at this link: <a href=\"https://developer.cartrack.com/fleet-api#authentication\">https://developer.cartrack.com/fleet-api#authentication</a>"
        }
    },
    "x-tagGroups": [
        {
            "name": "General",
            "tags": [
                "Dashboard",
                "Delivery",
                "Drivers",
                "Fitments",
                "Geofences",
                "Helpdesk",
                "Know the driver",
                "Leads",
                "Mikey",
                "Notifications",
                "Points of interest",
                "Subusers",
                "Terminals commands",
                "Trips",
                "User alerts",
                "Vehicle Groups",
                "Vehicles",
                "Vehicles commands"
            ]
        }
    ],
    "definitions": {
        "country": {
            "type": "object",
            "required": [],
            "properties": {
                "country_id": {
                    "type": "integer",
                    "format": "int64",
                    "example": 193
                },
                "name": {
                    "type": "string",
                    "example": "Singapore"
                },
                "country_code": {
                    "type": "string",
                    "example": "SG"
                },
                "country_phone_code": {
                    "type": "string",
                    "example": "65"
                }
            }
        },
        "delivery_customer_entry": {
            "type": "object",
            "required": [
                "customer_name",
                "address_line_1",
                "postal_code",
                "country_id"
            ],
            "properties": {
                "customer_name": {
                    "type": "string",
                    "example": "Mark",
                    "description": "The name of customer to create"
                },
                "address_line_1": {
                    "type": "string",
                    "example": "Mcnair Road",
                    "description": "The first line address"
                },
                "address_line_2": {
                    "type": "string",
                    "example": "Boonkeng Road",
                    "description": "The last line address"
                },
                "postal_code": {
                    "type": "string",
                    "example": "320119",
                    "description": "The postal code"
                },
                "country_id": {
                    "type": "integer",
                    "example": 193,
                    "description": "The delivery country id."
                },
                "contact_code": {
                    "type": "integer",
                    "example": "63",
                    "description": "The phone number country code"
                },
                "contact_number": {
                    "type": "integer",
                    "example": 123456789,
                    "description": "The phone number"
                },
                "email": {
                    "type": "string",
                    "example": "steven@hotmail.com",
                    "description": "The email address"
                }
            }
        },
        "delivery_customer": {
            "type": "object",
            "required": [],
            "properties": {
                "customer_id": {
                    "type": "UUID",
                    "example": "72856440-1047-11ec-a6d3-a4bf016cd6b2",
                    "description": "The customer ID"
                },
                "create_ts": {
                    "type": "string",
                    "example": "2021-09-08 09:52:38",
                    "description": "The creation timestamp"
                },
                "update_ts": {
                    "type": "string",
                    "example": null,
                    "description": "The last update timestamp"
                },
                "customer_name": {
                    "type": "string",
                    "example": "Mark",
                    "description": "The customer's name"
                },
                "email": {
                    "type": "string",
                    "example": "steven@hotmail.com",
                    "description": "The customer's email"
                },
                "contact_code": {
                    "type": "string",
                    "example": "63",
                    "description": "The contact country code"
                },
                "contact_number": {
                    "type": "string",
                    "example": "92729821",
                    "description": "The mobile device number"
                },
                "address_line_1": {
                    "type": "string",
                    "example": "Mcnair Road",
                    "description": "The address line 1"
                },
                "address_line_2": {
                    "type": "string",
                    "example": "Boonkeng Road",
                    "description": "The address line 2"
                },
                "postal_code": {
                    "type": "string",
                    "example": "320119",
                    "description": "The postal code"
                },
                "country_id": {
                    "type": "integer",
                    "example": 193,
                    "description": "The country ID"
                },
                "latitude": {
                    "type": "float",
                    "example": 1.31972,
                    "description": "The latitude"
                },
                "longitude": {
                    "type": "float",
                    "example": 103.85687,
                    "description": "The longitude"
                }
            }
        },
        "http_success_customer": {
            "type": "object",
            "required": [],
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/delivery_customer"
                    }
                },
                "meta": {
                    "$ref": "#/definitions/meta"
                }
            }
        },
        "meta": {
            "type": "object",
            "description": "The metadata such as pagination, current_page and more",
            "required": [],
            "properties": {
                "from": {
                    "type": "int",
                    "example": 1,
                    "description": "The page start count"
                },
                "to": {
                    "type": "int",
                    "example": 10,
                    "description": "The page record total count"
                },
                "current_page": {
                    "type": "int",
                    "example": 10,
                    "description": "The current page"
                },
                "per_page": {
                    "type": "int",
                    "example": 10,
                    "description": "The per page size"
                },
                "last_page": {
                    "type": "int",
                    "example": 10,
                    "description": "The last page"
                },
                "total": {
                    "type": "int",
                    "example": 100,
                    "description": "The total records"
                }
            }
        },
        "update_driver": {
            "type": "object",
            "required": [
                "first_name",
                "last_name",
                "phone_code",
                "phone_number",
                "login_username"
            ],
            "properties": {
                "first_name": {
                    "type": "string",
                    "example": "Steven",
                    "description": "The driver's first name"
                },
                "last_name": {
                    "type": "string",
                    "example": "Mark",
                    "description": "The driver's last name"
                },
                "phone_code": {
                    "type": "string",
                    "example": "65",
                    "description": "The country contact code"
                },
                "phone_number": {
                    "type": "integer",
                    "example": "9449912",
                    "description": "The mobile device number"
                },
                "email": {
                    "type": "string",
                    "example": "mark.steven@hotmail.com",
                    "description": "The email address"
                },
                "login_username": {
                    "type": "string",
                    "example": "mark.steven",
                    "description": "The unique username"
                },
                "password": {
                    "type": "string",
                    "example": "password",
                    "description": "When empty, password will not be updated"
                },
                "registration": {
                    "type": "string",
                    "example": "XL-TOYOTA",
                    "description": "The vehicle registration"
                },
                "is_active": {
                    "type": "boolean",
                    "example": true,
                    "description": "Activate/Deactive's account"
                }
            }
        },
        "http_success_driver": {
            "type": "object",
            "required": [],
            "properties": {
                "data": {
                    "$ref": "#/definitions/driver"
                }
            }
        },
        "http_error": {
            "type": "object",
            "required": [],
            "properties": {
                "data": {
                    "type": "object|null",
                    "description": "The data"
                },
                "error": {
                    "type": "object|null",
                    "description": "The error details"
                }
            }
        },
        "driver": {
            "type": "object",
            "required": [],
            "properties": {
                "delivery_driver_id": {
                    "type": "string",
                    "example": "62462fcf-0938-11ec-8c4d-a4bf016cd6b2",
                    "description": "In uuid format"
                },
                "create_ts": {
                    "type": "string",
                    "example": "2021-09-01 08:53:15",
                    "description": "Create timestamp "
                },
                "update_ts": {
                    "type": "string",
                    "example": "2021-09-01 08:53:15",
                    "description": "Update timestamp"
                },
                "first_name": {
                    "type": "string",
                    "example": "Mark Steven",
                    "description": "The driver's first name"
                },
                "last_name": {
                    "type": "string",
                    "example": "Jobs",
                    "description": "The driver's last name"
                },
                "phone_code": {
                    "type": "string",
                    "example": "65",
                    "description": "The country contact code"
                },
                "phone_number": {
                    "type": "string",
                    "example": "94281277",
                    "description": "The mobile device number"
                },
                "email": {
                    "type": "string",
                    "example": "steven.jobs@apple.com",
                    "description": "The email address"
                },
                "registration": {
                    "type": "string",
                    "example": "XL-MASDASD",
                    "description": "The vehicle registration"
                },
                "driver_status_id": {
                    "type": "integer",
                    "example": 4,
                    "enum": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "description": "1 = Ready, 2 = On Route, 3 = Idle, 4 = Offline, 5 = On Break"
                },
                "last_login_ts": {
                    "type": "string",
                    "example": "2021-09-01 08:53:15",
                    "description": "Last Login timestamp"
                },
                "is_online": {
                    "type": "boolean",
                    "example": false,
                    "description": "The flag to determine if driver is online"
                },
                "is_active": {
                    "type": "boolean",
                    "example": true,
                    "description": "The flag to determine if the account is active"
                },
                "latitude": {
                    "type": "float",
                    "example": 1.3201800174182,
                    "description": "The latitude"
                },
                "longitude": {
                    "type": "float",
                    "example": 103.88890856757,
                    "description": "The longitude"
                }
            }
        },
        "delivery_job_create": {
            "type": "object",
            "required": [
                "schedule_type_id",
                "items",
                "stops"
            ],
            "properties": {
                "delivery_driver_id": {
                    "type": "string",
                    "example": "f3a42187-0c6e-11ec-aa41-a4bf016cd6b2",
                    "description": "When null, job status will be set to 2 (Assign Later)"
                },
                "schedule_type_id": {
                    "type": "integer",
                    "description": "The type of delivery schedule. 1 = Asap, 2 = Schedule",
                    "enum": [
                        1,
                        2
                    ]
                },
                "scheduled_delivery_ts": {
                    "type": "string",
                    "example": "2021-09-11 11:40:36",
                    "description": "Delivery scheduled timestamp. Required when schedule_type_id is 2"
                },
                "reference_number": {
                    "type": "string",
                    "description": "Your custom reference number",
                    "example": "ABC123"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/delivery_items_create"
                    }
                },
                "stops": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/delivery_stops_create"
                    }
                }
            }
        },
        "delivery_items_create": {
            "type": "object",
            "required": [
                "weight_measure_id",
                "description",
                "weight"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Package",
                    "description": "The item description"
                },
                "weight": {
                    "type": "float",
                    "example": 10,
                    "description": "The weight"
                },
                "weight_measure_id": {
                    "type": "integer",
                    "format": "int64",
                    "example": 3,
                    "enum": [
                        1,
                        2,
                        3,
                        4
                    ],
                    "description": "1 = Kilogram, 2 = Gram, 3 = Pound, 4 = Ounce"
                },
                "item_type_id": {
                    "type": "integer",
                    "example": 1,
                    "enum": [
                        1
                    ],
                    "description": "1 = Package"
                },
                "quantity": {
                    "type": "integer",
                    "example": 1,
                    "description": "The quantity"
                },
                "tracking_number": {
                    "type": "string",
                    "example": "TRAK123",
                    "description": "A unique ID or number assigned to a package/parcel"
                },
                "todos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/delivery_item_todos_create"
                    }
                }
            }
        },
        "delivery_item_todos_create": {
            "type": "object",
            "required": [
                "todo_type_id",
                "stop_type_id",
                "is_required"
            ],
            "properties": {
                "todo_type_id": {
                    "type": "integer",
                    "example": 1,
                    "enum": [
                        1,
                        2
                    ],
                    "description": "1 = Get Signature, 2 = Take Photo (POD)"
                },
                "stop_type_id": {
                    "type": "integer",
                    "example": 2,
                    "enum": [
                        1,
                        2
                    ],
                    "description": "1 = Pickup, 2 = Dropoff"
                },
                "is_required": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "delivery_stops_create": {
            "type": "object",
            "required": [
                "stop_type_id"
            ],
            "properties": {
                "customer_id": {
                    "type": "string",
                    "example": "8f448428-15c7-11ec-8d5d-a4bf016cd6b2",
                    "description": "In uuid format or null"
                },
                "stop_type_id": {
                    "type": "integer",
                    "example": 1,
                    "description": "1 = Pickup, 2 = Dropoff",
                    "enum": [
                        1,
                        2
                    ]
                },
                "scheduled_delivery_ts": {
                    "type": "string",
                    "example": "2021-09-11 11:40:36",
                    "description": "Delivery scheduled timestamp. Required when schedule_type_id is 2"
                },
                "customer_name": {
                    "type": "string",
                    "example": "Steven Jobs",
                    "description": "The customer name"
                },
                "address_line_1": {
                    "type": "string",
                    "example": "Block 119 Mcnair Road",
                    "description": "The address line 1"
                },
                "address_line_2": {
                    "type": "string",
                    "example": "2 Aljunied Ave 1, #06-11, Framework Building 2",
                    "description": "The address line 2"
                },
                "postal_code": {
                    "type": "string",
                    "example": "360008",
                    "description": "The postal code"
                },
                "country_id": {
                    "type": "string",
                    "example": 193,
                    "description": "The country ID"
                },
                "email": {
                    "type": "string",
                    "example": "steven.jobs@hotmail.com",
                    "description": "Email address"
                },
                "contact_code": {
                    "type": "string",
                    "example": "65",
                    "description": "The phone number"
                },
                "contact_number": {
                    "type": "string",
                    "example": "82645558",
                    "description": "The contact country code"
                },
                "note": {
                    "type": "string",
                    "example": "Call before delivery",
                    "description": "The driver note"
                },
                "save_to_address_book": {
                    "type": "boolean",
                    "example": true,
                    "description": "The flag to update or creates customer's details in the address book"
                },
                "todos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/delivery_stop_todos_create"
                    }
                }
            }
        },
        "delivery_stop_todos_create": {
            "type": "object",
            "required": [
                "todo_type_id",
                "is_required"
            ],
            "properties": {
                "todo_type_id": {
                    "type": "integer",
                    "example": 2,
                    "enum": [
                        1,
                        2
                    ],
                    "description": "1 = Get Signature, 2 = Take Photo (POD)"
                },
                "is_required": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "delivery_job": {
            "type": "object",
            "required": [
                "name",
                "photoUrls"
            ],
            "properties": {
                "job_id": {
                    "type": "integer",
                    "format": "int64",
                    "example": 12
                },
                "create_ts": {
                    "type": "string",
                    "example": "2021-09-08 11:40:36",
                    "description": "Created timestamp"
                },
                "update_ts": {
                    "type": "string",
                    "example": null,
                    "description": "Updated timestamp"
                },
                "order_id": {
                    "type": "string",
                    "description": "A system generated order no.",
                    "example": "20210908000021"
                },
                "reference_number": {
                    "type": "string",
                    "description": "Your custom reference number",
                    "example": "ABC123"
                },
                "scheduled_delivery_ts": {
                    "type": "string|null",
                    "example": "2021-09-11 11:40:36",
                    "description": "Delivery scheduled timestamp"
                },
                "delivery_driver_id": {
                    "type": "string",
                    "example": "f3a42187-0c6e-11ec-aa41-a4bf016cd6b2",
                    "description": "In uuid format"
                },
                "assigned_ts": {
                    "type": "string",
                    "example": "2021-09-08 11:40:36",
                    "description": "Assigned timestamp"
                },
                "schedule_type_id": {
                    "type": "integer",
                    "description": "The type of delivery schedule. 1 = Asap, 2 = Schedule ",
                    "enum": [
                        1,
                        2
                    ]
                },
                "job_status_id": {
                    "type": "integer",
                    "description": "The current job status, 1 = Non-assigned, 2 = Assign Later, 3 = Rejected/Failed, 4 = Assigned, 5 = Completed, 6 = Exception",
                    "enum": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ]
                },
                "driver": {
                    "$ref": "#/definitions/driver"
                },
                "stops": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/delivery_stops"
                    }
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/delivery_items"
                    }
                }
            }
        },
        "delivery_items": {
            "type": "object",
            "properties": {
                "job_item_id": {
                    "type": "integer",
                    "format": "int64",
                    "example": 52
                },
                "create_ts": {
                    "type": "string",
                    "example": "2021-09-08 11:40:36",
                    "description": "Created timestamp"
                },
                "update_ts": {
                    "type": "string",
                    "example": "2021-09-08 11:40:36",
                    "description": "Updated timestamp"
                },
                "job_id": {
                    "type": "integer",
                    "format": "int64",
                    "example": 12
                },
                "item_type_id": {
                    "type": "integer",
                    "example": 1,
                    "enum": [
                        1
                    ],
                    "description": "1 = Package"
                },
                "weight_measure_id": {
                    "type": "integer",
                    "example": 3,
                    "enum": [
                        1,
                        2,
                        3,
                        4
                    ],
                    "description": "1 = Kilogram, 2 = Gram, 3 = Pound, 4 = Ounce"
                },
                "description": {
                    "type": "string",
                    "example": "Package",
                    "description": "The item description"
                },
                "weight": {
                    "type": "float",
                    "example": 10,
                    "description": "The item weight"
                },
                "job_item_status_id_pickup": {
                    "type": "integer",
                    "example": 5,
                    "enum": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "description": "1 = Uncompleted, 2 = Completed OK, 3 = Rejected, 4 = Partial Rejected, 5 = Damage Return"
                },
                "job_item_status_id_dropoff": {
                    "type": "integer",
                    "example": 2,
                    "enum": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "description": "1 = Uncompleted, 2 = Completed OK, 3 = Rejected, 4 = Partial Rejected, 5 = Damage Return"
                },
                "tracking_number": {
                    "type": "string",
                    "example": "TRAK123",
                    "description": "A unique ID or number assigned to a package/parcel"
                },
                "todos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/delivery_item_todos"
                    }
                }
            }
        },
        "delivery_item_todos": {
            "type": "object",
            "properties": {
                "job_item_todo_id": {
                    "type": "integer",
                    "format": "int64",
                    "example": 56
                },
                "create_ts": {
                    "type": "string",
                    "example": "2021-09-08 11:40:36",
                    "description": "Created timestamp"
                },
                "update_ts": {
                    "type": "string",
                    "example": "2021-09-08 11:40:36",
                    "description": "Updated timestamp"
                },
                "job_item_id": {
                    "type": "integer",
                    "format": "int64",
                    "example": 52
                },
                "todo_type_id": {
                    "type": "integer",
                    "example": 1,
                    "enum": [
                        1,
                        2
                    ],
                    "description": "1 = Get Signature, 2 = Take Photo (POD)"
                },
                "todo_status_id": {
                    "type": "integer",
                    "example": 2,
                    "enum": [
                        null,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ],
                    "description": "null, 1 = Customer Not Show, 2 = Refuse to Sign, 3 = Others, 4 = No Response, 5 = No Preson at Home, 6 = Others"
                },
                "status_remarks": {
                    "type": "string",
                    "example": null,
                    "description": "Status information"
                },
                "complete_ts": {
                    "type": "string",
                    "example": "2021-09-08 11:40:36",
                    "description": "Completed timestamp"
                },
                "is_required": {
                    "type": "boolean",
                    "example": true,
                    "description": "The flag for required"
                },
                "stop_type_id": {
                    "type": "integer",
                    "example": 2,
                    "enum": [
                        1,
                        2
                    ],
                    "description": "1 = Pickup, 2 = Dropoff"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/delivery_item_todo_images"
                    }
                }
            }
        },
        "delivery_item_todo_images": {
            "type": "object",
            "properties": {
                "image_id": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1024,
                    "description": "The image id number"
                },
                "create_ts": {
                    "type": "string",
                    "example": "2021-09-08 11:40:36",
                    "description": "Created timestamp"
                },
                "image_filename": {
                    "type": "string",
                    "example": "20210910052610wlVZQL.jpeg",
                    "description": "The image file"
                },
                "image_path": {
                    "type": "string",
                    "example": "\\/storage\\/uploads",
                    "description": "The storage location"
                },
                "customer_name": {
                    "type": "string",
                    "example": "Stev O",
                    "description": "Customer name"
                },
                "job_item_todo_id": {
                    "type": "integer",
                    "example": 8851,
                    "description": "The parent id"
                },
                "image_url": {
                    "type": "string",
                    "example": "https:\\/\\/apps.cartrack.sg\\/delivery_api\\/\\/storage\\/uploads\\/20210910052610wlVZQL.jpeg",
                    "description": "The full path of the image url"
                }
            }
        },
        "delivery_stops": {
            "type": "object",
            "properties": {
                "stop_id": {
                    "type": "integer",
                    "format": "int64",
                    "example": 156,
                    "description": "The stop ID"
                },
                "create_ts": {
                    "type": "string",
                    "example": "2021-09-08 11:40:36",
                    "description": "Created timestamp"
                },
                "update_ts": {
                    "type": "string",
                    "example": null,
                    "description": "Updated timestamp"
                },
                "job_id": {
                    "type": "integer",
                    "format": "int64",
                    "example": 12
                },
                "stop_type_id": {
                    "type": "integer",
                    "example": 2,
                    "enum": [
                        1,
                        2
                    ],
                    "description": "1 = Pickup, 2 = Dropoff"
                },
                "stop_status_id": {
                    "type": "integer",
                    "example": 2,
                    "enum": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ],
                    "description": "1 = Created, 2 = Started, 3 = Arrived, 4 = Completed, 5 = Rejected"
                },
                "country_id": {
                    "type": "integer",
                    "example": 193,
                    "description": "The country ID"
                },
                "customer_id": {
                    "type": "string",
                    "example": "a4d8f9dc-0eb4-11ec-9296-a4bf016cd6b2",
                    "description": "In uuid format"
                },
                "user_id": {
                    "type": "integer",
                    "example": 227020,
                    "description": "The currently logged in user."
                },
                "ordering": {
                    "type": "integer",
                    "example": 1,
                    "description": "Ordering of stops"
                },
                "scheduled_delivery_ts": {
                    "type": "string",
                    "example": "2021-09-08 11:40:36",
                    "description": "Scheduled delivery timestamp"
                },
                "contact_number": {
                    "type": "string",
                    "example": "82645558",
                    "description": "The contact country code"
                },
                "contact_code": {
                    "type": "string",
                    "example": "65",
                    "description": "The mobile device number"
                },
                "email": {
                    "type": "string",
                    "example": "steven.jobs@hotmail.com",
                    "description": "Email address"
                },
                "address_line_1": {
                    "type": "string",
                    "example": "Block 119 Mcnair Road",
                    "description": "The address line 1"
                },
                "address_line_2": {
                    "type": "string",
                    "example": "2 Aljunied Ave 1, #06-11, Framework Building 2",
                    "description": "The address line 2"
                },
                "postal_code": {
                    "type": "string",
                    "example": "360008",
                    "description": "The address postal code"
                },
                "latitude": {
                    "type": "float",
                    "example": "1.3352",
                    "description": "The latitude"
                },
                "longitude": {
                    "type": "float",
                    "example": "103.8787",
                    "description": "The longitude"
                },
                "note": {
                    "type": "string",
                    "example": "Call before delivery",
                    "description": "The driver note"
                },
                "status_remarks": {
                    "type": "string",
                    "example": "Customer not showing.",
                    "description": "Status information"
                },
                "todo_complete_ts": {
                    "type": "string",
                    "example": "2021-09-08 11:40:36",
                    "description": "Todo Complete timestamp"
                },
                "activity_started_ts": {
                    "type": "string",
                    "example": "2021-09-08 11:40:00",
                    "description": "Activity started timestamp"
                },
                "activity_arrived_ts": {
                    "type": "string",
                    "example": "2021-09-08 11:41:00",
                    "description": "Activity arrived timestamp"
                },
                "activity_completed_ts": {
                    "type": "string",
                    "example": "2021-09-08 11:42:00",
                    "description": "Activity completed timestamp"
                },
                "activity_rejected_ts": {
                    "type": "string",
                    "example": null,
                    "description": "Activity rejected timestamp"
                },
                "todos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/delivery_stop_todos"
                    }
                },
                "customer": {
                    "$ref": "#/definitions/delivery_customer"
                }
            }
        },
        "delivery_stop_todos": {
            "type": "object",
            "properties": {
                "stop_todo_id": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1023,
                    "description": "The stop todo ID"
                },
                "create_ts": {
                    "type": "string",
                    "example": "2021-09-08 11:40:36",
                    "description": "Created timestamp"
                },
                "update_ts": {
                    "type": "string",
                    "example": null,
                    "description": "Updated timestamp"
                },
                "stop_id": {
                    "type": "integer",
                    "format": "int64",
                    "example": 156,
                    "description": "The stop todo ID"
                },
                "todo_type_id": {
                    "type": "integer",
                    "example": 2,
                    "enum": [
                        null,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ],
                    "description": "1 = Get Signature, 2 = Take Photo (POD)"
                },
                "todo_status_id": {
                    "type": "integer",
                    "example": 2,
                    "enum": [
                        null,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ],
                    "description": "null, 1 = Customer Not Show, 2 = Refuse to Sign, 3 = Others, 4 = No Response, 5 = No Preson at Home, 6 = Others"
                },
                "status_remarks": {
                    "type": "string",
                    "example": "Customer not showing.",
                    "description": "Status information"
                },
                "complete_ts": {
                    "type": "string",
                    "example": null,
                    "description": "Completed timestamp"
                },
                "is_required": {
                    "type": "boolean",
                    "example": true,
                    "description": "The required flag"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/delivery_stop_todo_images"
                    }
                }
            }
        },
        "delivery_stop_todo_images": {
            "type": "object",
            "properties": {
                "image_id": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1024,
                    "description": "The image id number"
                },
                "create_ts": {
                    "type": "string",
                    "example": "2021-09-08 11:40:36",
                    "description": "Created timestamp"
                },
                "image_filename": {
                    "type": "string",
                    "example": "20210910052610wlVZQL.jpeg",
                    "description": "The image file"
                },
                "image_path": {
                    "type": "string",
                    "example": "\\/storage\\/uploads",
                    "description": "The storage location"
                },
                "customer_name": {
                    "type": "string",
                    "example": "Stev O",
                    "description": "Customer name"
                },
                "stop_todo_id": {
                    "type": "integer",
                    "example": 1023,
                    "description": "The parent id"
                },
                "image_url": {
                    "type": "string",
                    "example": "https:\\/\\/apps.cartrack.sg\\/delivery_api\\/\\/storage\\/uploads\\/20210910052610wlVZQL.jpeg",
                    "description": "The full path of the image url"
                }
            }
        },
        "delivery_job_update": {
            "type": "object",
            "required": [
                "job_id",
                "schedule_type_id",
                "items",
                "stops"
            ],
            "properties": {
                "job_id": {
                    "type": "integer",
                    "example": 12,
                    "description": "The job ID"
                },
                "delivery_driver_id": {
                    "type": "string",
                    "example": "f3a42187-0c6e-11ec-aa41-a4bf016cd6b2",
                    "description": "When null, job status will be set to 2 (Assign Later)"
                },
                "schedule_type_id": {
                    "type": "integer",
                    "description": "The type of delivery schedule. 1 = Asap, 2 = Schedule",
                    "enum": [
                        1,
                        2
                    ]
                },
                "scheduled_delivery_ts": {
                    "type": "string",
                    "example": "2021-09-11 11:40:36",
                    "description": "Delivery scheduled timestamp. Required when schedule_type_id is 2"
                },
                "reference_number": {
                    "type": "string",
                    "description": "Your custom reference number",
                    "example": "ABC123"
                },
                "items": {
                    "type": "array",
                    "description": "IMPORTANT NOTE: When item object is removed, it'll be deleted in the database",
                    "items": {
                        "$ref": "#/definitions/delivery_items_update"
                    }
                },
                "stops": {
                    "type": "array",
                    "description": "IMPORTANT NOTE: When stop object is removed, it'll be deleted in the database",
                    "items": {
                        "$ref": "#/definitions/delivery_stops_update"
                    }
                }
            }
        },
        "delivery_items_update": {
            "type": "object",
            "required": [
                "job_item_id",
                "weight_measure_id",
                "description",
                "weight"
            ],
            "properties": {
                "job_item_id": {
                    "type": "integer|null",
                    "example": 423,
                    "description": "When ID is null, item will be created"
                },
                "description": {
                    "type": "string",
                    "example": "Package",
                    "description": "The item description"
                },
                "weight": {
                    "type": "float",
                    "example": 10,
                    "description": "The weight"
                },
                "weight_measure_id": {
                    "type": "integer",
                    "format": "int64",
                    "example": 3,
                    "enum": [
                        1,
                        2,
                        3,
                        4
                    ],
                    "description": "1 = Kilogram, 2 = Gram, 3 = Pound, 4 = Ounce"
                },
                "item_type_id": {
                    "type": "integer",
                    "example": 1,
                    "enum": [
                        1
                    ],
                    "description": "1 = Package"
                },
                "quantity": {
                    "type": "integer",
                    "example": 1,
                    "description": "The quantity"
                },
                "tracking_number": {
                    "type": "string",
                    "example": "TRAK123",
                    "description": "A unique ID or number assigned to a package/parcel"
                },
                "todos": {
                    "type": "array",
                    "description": "IMPORTANT NOTE: When todo object is removed, it'll be deleted in the database",
                    "items": {
                        "$ref": "#/definitions/delivery_item_todos_update"
                    }
                }
            }
        },
        "delivery_item_todos_update": {
            "type": "object",
            "required": [
                "job_item_todo_id",
                "todo_type_id",
                "stop_type_id",
                "is_required"
            ],
            "properties": {
                "job_item_todo_id": {
                    "type": "integer|null",
                    "example": 1094,
                    "description": "When ID is null, item will be created"
                },
                "todo_type_id": {
                    "type": "integer",
                    "example": 1,
                    "enum": [
                        1,
                        2
                    ],
                    "description": "1 = Get Signature, 2 = Take Photo (POD)"
                },
                "stop_type_id": {
                    "type": "integer",
                    "example": 2,
                    "enum": [
                        1,
                        2
                    ],
                    "description": "1 = Pickup, 2 = Dropoff"
                },
                "is_required": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "delivery_stops_update": {
            "type": "object",
            "required": [
                "stop_id",
                "stop_type_id"
            ],
            "properties": {
                "stop_id": {
                    "type": "integer|null",
                    "example": 236,
                    "description": "When ID is null, item will be created"
                },
                "customer_id": {
                    "type": "string",
                    "example": "8f448428-15c7-11ec-8d5d-a4bf016cd6b2",
                    "description": "In uuid format or null"
                },
                "stop_type_id": {
                    "type": "integer",
                    "example": 1,
                    "description": "1 = Pickup, 2 = Dropoff",
                    "enum": [
                        1,
                        2
                    ]
                },
                "scheduled_delivery_ts": {
                    "type": "string",
                    "example": "2021-09-11 11:40:36",
                    "description": "Delivery scheduled timestamp. Required when schedule_type_id is 2"
                },
                "customer_name": {
                    "type": "string",
                    "example": "Steven Jobs",
                    "description": "The customer name"
                },
                "address_line_1": {
                    "type": "string",
                    "example": "Block 119 Mcnair Road",
                    "description": "The address line 1"
                },
                "address_line_2": {
                    "type": "string",
                    "example": "2 Aljunied Ave 1, #06-11, Framework Building 2",
                    "description": "The address line 2"
                },
                "postal_code": {
                    "type": "string",
                    "example": "360008",
                    "description": "The postal code"
                },
                "country_id": {
                    "type": "string",
                    "example": 193,
                    "description": "The country ID"
                },
                "email": {
                    "type": "string",
                    "example": "steven.jobs@hotmail.com",
                    "description": "Email address"
                },
                "contact_code": {
                    "type": "string",
                    "example": "65",
                    "description": "The phone number"
                },
                "contact_number": {
                    "type": "string",
                    "example": "82645558",
                    "description": "The contact country code"
                },
                "note": {
                    "type": "string",
                    "example": "Call before delivery",
                    "description": "The driver note"
                },
                "save_to_address_book": {
                    "type": "boolean",
                    "example": true,
                    "description": "The flag to update or creates customer's details in the address book"
                },
                "todos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/delivery_stop_todos_update"
                    }
                }
            }
        },
        "delivery_stop_todos_update": {
            "type": "object",
            "required": [
                "todo_type_id",
                "is_required"
            ],
            "properties": {
                "stop_todo_id": {
                    "type": "integer|null",
                    "example": 1234,
                    "description": "When ID is null, item will be created"
                },
                "todo_type_id": {
                    "type": "integer",
                    "example": 2,
                    "enum": [
                        1,
                        2
                    ],
                    "description": "1 = Get Signature, 2 = Take Photo (POD)"
                },
                "is_required": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "create_driver_fleet": {
            "type": "object",
            "required": [
                "first_name",
                "last_name",
                "email",
                "gender"
            ],
            "properties": {
                "first_name": {
                    "type": "string",
                    "example": "Mark",
                    "description": "The driver's first name"
                },
                "last_name": {
                    "type": "string",
                    "example": "Steven",
                    "description": "The driver's last name"
                },
                "email": {
                    "type": "string",
                    "format": "email",
                    "maxLength": 100,
                    "example": "mark.steven@example.com",
                    "description": "The driver's email address"
                },
                "id_number": {
                    "type": "string",
                    "example": "CT12346X",
                    "maxLength": 50,
                    "description": "The driver's id number"
                },
                "phone_code": {
                    "type": "string",
                    "example": "65",
                    "minLength": 1,
                    "maxLength": 4,
                    "pattern": "^[0-9]{1,4}$",
                    "description": "The country contact code without the phone code"
                },
                "phone_number": {
                    "type": "string",
                    "example": "9449912",
                    "description": "The driver's contact number"
                },
                "gender": {
                    "type": "string",
                    "example": "female",
                    "description": "The driver's gender",
                    "enum": [
                        "male",
                        "female"
                    ]
                },
                "license_number": {
                    "type": "string",
                    "example": "ABC123X",
                    "maxLength": 50,
                    "description": "The driver's license number"
                },
                "license_issued_country": {
                    "type": "string",
                    "example": "SG",
                    "minLength": 2,
                    "maxLength": 2,
                    "pattern": "^[A-Z]{2}$",
                    "description": "The driver's issued license country code"
                },
                "license_points": {
                    "type": "integer",
                    "example": 10,
                    "description": "The driver's license points"
                },
                "license_driver_restrictions": {
                    "type": "string",
                    "maxLength": 20,
                    "example": "Weekdays only",
                    "description": "The driver's restrictions"
                },
                "license_first_issue_date": {
                    "type": "string",
                    "format": "date",
                    "example": "YYYY-MM-DD",
                    "description": "The first issued date of the license"
                },
                "license_valid_start": {
                    "type": "string",
                    "format": "YYYY-MM-DD",
                    "example": "2000-01-25",
                    "description": "The start date of the license"
                },
                "license_valid_end": {
                    "type": "string",
                    "format": "YYYY-MM-DD",
                    "example": "2000-12-30",
                    "description": "The end date fo the license"
                }
            }
        },
        "http_success_driver_fleet": {
            "type": "object",
            "required": [],
            "properties": {
                "data": {
                    "$ref": "#/definitions/driver_fleet"
                }
            }
        },
        "driver_fleet": {
            "title": "driver object",
            "type": "object",
            "required": [
                "driver_id",
                "first_name",
                "last_name",
                "email",
                "gender",
                "status"
            ],
            "properties": {
                "driver_id": {
                    "type": "string",
                    "format": "uuid",
                    "example": "62462fcf-0938-11ec-8c4d-a4bf016cd6b2",
                    "description": "The driver's unique identifier"
                },
                "first_name": {
                    "type": "string",
                    "example": "Mark",
                    "description": "The driver's first name"
                },
                "last_name": {
                    "type": "string",
                    "example": "Steven",
                    "description": "The driver's last name"
                },
                "email": {
                    "type": "string",
                    "format": "email",
                    "example": "mark.steven@hotmail.com",
                    "description": "The driver's email address"
                },
                "id_number": {
                    "type": "string",
                    "x-nullable": true,
                    "example": "931919191",
                    "description": "The driver's id number"
                },
                "phone_number": {
                    "type": "string",
                    "x-nullable": true,
                    "example": "659449912",
                    "description": "The driver's contact number"
                },
                "gender": {
                    "type": "string",
                    "example": "female",
                    "enum": [
                        "male",
                        "female"
                    ],
                    "description": "The driver's gender"
                },
                "license_number": {
                    "type": "string",
                    "x-nullable": true,
                    "example": "ABC1234X",
                    "description": "The driver's license number"
                },
                "license_issued_country": {
                    "type": "string",
                    "x-nullable": true,
                    "example": "SG",
                    "description": "The driver's issued license country code"
                },
                "license_points": {
                    "type": "integer",
                    "x-nullable": true,
                    "example": 10,
                    "description": "The driver's license points"
                },
                "license_driver_restrictions": {
                    "type": "string",
                    "x-nullable": true,
                    "example": "Weekdays only",
                    "description": "The driver's restrictions"
                },
                "license_first_issue_date": {
                    "type": "date",
                    "x-nullable": true,
                    "format": "YYYY-MM-DD",
                    "example": "2002-01-25",
                    "description": "The first issued date of the license"
                },
                "license_valid_start": {
                    "type": "date",
                    "x-nullable": true,
                    "format": "YYYY-MM-DD",
                    "example": "2002-01-25",
                    "description": "The start date of the license"
                },
                "license_valid_end": {
                    "type": "date",
                    "x-nullable": true,
                    "format": "YYYY-MM-DD",
                    "example": "2002-01-25",
                    "description": "The end date fo the license"
                },
                "status": {
                    "type": "string",
                    "example": "Active",
                    "default": "Active",
                    "enum": [
                        "Active",
                        "Inactive",
                        "Can Drive All Vehicles",
                        "Cannot Drive All Vehicles"
                    ],
                    "description": "The status of the driver"
                }
            }
        },
        "update_driver_fleet": {
            "type": "object",
            "required": [
                "first_name",
                "last_name",
                "email",
                "gender"
            ],
            "properties": {
                "first_name": {
                    "type": "string",
                    "example": "Mark",
                    "description": "The driver's first name"
                },
                "last_name": {
                    "type": "string",
                    "example": "Steven",
                    "description": "The driver's last name"
                },
                "email": {
                    "type": "string",
                    "format": "email",
                    "maxLength": 100,
                    "example": "mark.steven@example.com",
                    "description": "The driver's email address"
                },
                "id_number": {
                    "type": "string",
                    "example": "CT12346X",
                    "maxLength": 50,
                    "description": "The driver's id number"
                },
                "phone_code": {
                    "type": "string",
                    "example": "65",
                    "minLength": 1,
                    "maxLength": 4,
                    "pattern": "^[0-9]{1,4}$",
                    "description": "The country contact code without the phone code"
                },
                "phone_number": {
                    "type": "string",
                    "example": "9449912",
                    "description": "The driver's contact number"
                },
                "gender": {
                    "type": "string",
                    "example": "female",
                    "description": "The driver's gender",
                    "enum": [
                        "male",
                        "female"
                    ]
                },
                "license_number": {
                    "type": "string",
                    "example": "ABC123X",
                    "maxLength": 50,
                    "description": "The driver's license number"
                },
                "license_issued_country": {
                    "type": "string",
                    "example": "SG",
                    "minLength": 2,
                    "maxLength": 2,
                    "pattern": "^[A-Z]{2}$",
                    "description": "The driver's issued license country code"
                },
                "license_points": {
                    "type": "integer",
                    "example": 10,
                    "description": "The driver's license points"
                },
                "license_driver_restrictions": {
                    "type": "string",
                    "maxLength": 20,
                    "example": "Weekdays only",
                    "description": "The driver's restrictions"
                },
                "license_first_issue_date": {
                    "type": "string",
                    "format": "date",
                    "example": "YYYY-MM-DD",
                    "description": "The first issued date of the license"
                },
                "license_valid_start": {
                    "type": "string",
                    "format": "YYYY-MM-DD",
                    "example": "2000-01-25",
                    "description": "The start date of the license"
                },
                "license_valid_end": {
                    "type": "string",
                    "format": "YYYY-MM-DD",
                    "example": "2000-12-30",
                    "description": "The end date fo the license"
                }
            }
        },
        "fitment_item": {
            "type": "object",
            "properties": {
                "vehicle_id": {
                    "type": "integer",
                    "description": "The id of the vehicle",
                    "example": 12345
                },
                "registration": {
                    "type": "string",
                    "description": "The license plate of the vehicle",
                    "example": "ABC1234X"
                },
                "chassis_number": {
                    "type": "string",
                    "description": "The chassis number of the vehicle",
                    "example": "ABDE234235FGRE"
                },
                "terminal_id": {
                    "type": "integer",
                    "description": "The id of the terminal installed in the vehicle",
                    "example": 456789
                },
                "terminal_serial": {
                    "type": "string",
                    "example": "CTEF456S",
                    "description": "The serial of the Cartrack terminal"
                },
                "fitment_date": {
                    "type": "timestamp",
                    "example": "2022-01-01 12:00:01",
                    "description": "The date and time of the fitment or repair"
                }
            }
        },
        "geofence_visitors": {
            "type": "object",
            "required": [
                "geofence_id",
                "geofence_name",
                "vehicle_id",
                "registration"
            ],
            "properties": {
                "geofence_id": {
                    "type": "string",
                    "description": "The id of the geofence",
                    "example": "02870802-xxxx-42ed-xxxx-c999df353f42"
                },
                "geofence_name": {
                    "type": "string",
                    "description": "The name of the geofence",
                    "example": "The Office"
                },
                "vehicle_id": {
                    "type": "integer",
                    "description": "The id of the vehicle",
                    "example": 12345
                },
                "registration": {
                    "type": "string",
                    "description": "The license plate of the vehicle",
                    "example": "ABC1234X"
                }
            }
        },
        "geofence_visitors_item": {
            "type": "object",
            "required": [
                "geofence_id",
                "geofence_name",
                "vehicle_id",
                "registration"
            ],
            "properties": {
                "geofence_id": {
                    "type": "string",
                    "description": "The id of the geofence",
                    "example": "02870802-xxxx-42ed-xxxx-c999df353f42"
                },
                "geofence_name": {
                    "type": "string",
                    "description": "The name of the geofence",
                    "example": "The Office"
                },
                "vehicle_id": {
                    "type": "integer",
                    "description": "The id of the vehicle",
                    "example": 12345
                },
                "registration": {
                    "type": "string",
                    "description": "The license plate of the vehicle",
                    "example": "ABC1234X"
                }
            }
        },
        "geofence_item": {
            "title": "geofence object",
            "type": "object",
            "properties": {
                "geofence_id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The id of the geofence",
                    "example": "02870802-xxxx-42ed-xxxx-c999df353f42"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the geofence",
                    "example": "Parking"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the geofence",
                    "example": "Supermarket parking lot"
                },
                "create_ts": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-09-01 08:53:15",
                    "description": "The create timestamp"
                },
                "update_ts": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-09-01 08:53:15",
                    "description": "The last update timestamp"
                },
                "colour": {
                    "type": "string",
                    "description": "The colour of the geofence",
                    "example": "#334455"
                },
                "polygon": {
                    "type": "string",
                    "description": "The polygon points of the geofence.",
                    "example": "POLYGON((28.039298057556 -26.142388292132,28.039877414703 -26.144584206976,28.040134906769, ... ))"
                },
                "position_description": {
                    "type": "string",
                    "description": "The nearest street address",
                    "example": "ABC near XYZ"
                },
                "subuser_id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The subuser_id for which the geofence is created",
                    "example": "7489ff44-xxxx-11eb-xxxx-005056a801ca"
                }
            }
        },
        "create_geofence": {
            "type": "object",
            "required": [
                "geofence_type_id",
                "name",
                "polygon"
            ],
            "properties": {
                "polygon": {
                    "in": "body",
                    "description": "The points of polygon in format: POLYGON((<lat> <lon>,<lat> <lon>, ...))",
                    "type": "string",
                    "example": "POLYGON((28.039298057556 -26.142388292132,28.039877414703 -26.144584206976,28.040134906769, ... ))"
                },
                "name": {
                    "in": "body",
                    "type": "string",
                    "example": "Parking",
                    "description": "The name of the geofence"
                },
                "description": {
                    "in": "body",
                    "type": "string",
                    "example": "Supermarket parking lot",
                    "description": "The geofence description"
                },
                "colour": {
                    "in": "body",
                    "type": "string",
                    "example": "#334455",
                    "description": "If you want to assign an hexadecimal colour value"
                },
                "subuser_id": {
                    "in": "body",
                    "type": "string",
                    "format": "uuid",
                    "example": "7489ff44-xxxx-11eb-xxxx-005056a801ca",
                    "description": "The subuser_id"
                }
            }
        },
        "update_geofence": {
            "type": "object",
            "properties": {
                "polygon": {
                    "in": "body",
                    "description": "The points of polygon in format: POLYGON((<lat> <lon>,<lat> <lon>, ...))",
                    "type": "string",
                    "example": "POLYGON((28.039298057556 -26.142388292132,28.039877414703 -26.144584206976,28.040134906769, ... ))"
                },
                "name": {
                    "in": "body",
                    "type": "string",
                    "example": "Parking",
                    "description": "The name of the geofence"
                },
                "description": {
                    "in": "body",
                    "type": "string",
                    "example": "Supermarket parking lot",
                    "description": "The geofence description"
                },
                "colour": {
                    "in": "body",
                    "type": "string",
                    "example": "#334455",
                    "description": "If you want to assign an hexadecimal colour value"
                },
                "subuser_id": {
                    "in": "body",
                    "type": "string",
                    "format": "uuid",
                    "example": "72856440-1047-11ec-a6d3-a4bf016cd6b2",
                    "description": "The subuser_id"
                }
            }
        },
        "log_helpdesk_request": {
            "title": "object",
            "type": "object",
            "required": [
                "note"
            ],
            "properties": {
                "note": {
                    "in": "body",
                    "description": "Issue description",
                    "type": "string",
                    "example": "SAMPLE TEXT"
                }
            }
        },
        "log_helpdesk_response": {
            "title": "object",
            "type": "object",
            "required": [
                "helpdesk_id"
            ],
            "properties": {
                "helpdesk_id": {
                    "type": "integer",
                    "description": "The id of the helpdesk request",
                    "example": 123457
                }
            }
        },
        "log_helpdesk_meta": {
            "title": "object",
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "description": "The response of the helpdesk request",
                    "example": "Your helpdesk note has been received."
                }
            }
        },
        "create_lead_policy": {
            "type": "object",
            "required": [
                "original_id",
                "title_type_id",
                "first_name",
                "surname",
                "id_number",
                "passport",
                "cell_number",
                "email"
            ],
            "properties": {
                "original_id": {
                    "type": "integer",
                    "description": "Required. The original id of the document supporting the lead policy. It must be unique",
                    "example": 1000123
                },
                "title_type_id": {
                    "type": "integer",
                    "description": "The title_type_id must be one of the following:\n                    <head>\n                    <meta charset=\"UTF-8\"/>\n                    <style>\n                    .tableTitle {border: none;border-collapse: collapse;} .tableTitle th{font-family: monospace;border: thin solid #6495ed;padding: 5px;background-color: #f5ba9b;} .tableTitle td{font-family: sans-serif;border: thin solid #6495ed;padding: 5px;text-align: center;} .tableTitle .odd{background:#e8edff;} .tableTitle img{padding:5px; border:solid; border-color: #dddddd #aaaaaa #aaaaaa #dddddd; border-width: 1px 2px 2px 1px; background-color:white;}\n                    </style>\n                    </head>\n                    <table class=\"tableTitle\">\n                    <tr><th>title_type_id</th><th>description</th></tr>\n                    <tr><td>1</td><td>Mr</td></tr>\n                    <tr class=\"odd\"><td>2</td><td>Mrs</td></tr>\n                    <tr><td>3</td><td>Me</td></tr>\n                    <tr class=\"odd\"><td>4</td><td>Dr</td></tr>\n                    <tr><td>5</td><td>Prof</td></tr>\n                    <tr class=\"odd\"><td>6</td><td>Sir</td></tr>\n                    <tr><td>7</td><td>Miss</td></tr>\n                    <tr class=\"odd\"><td>8</td><td>Ms</td></tr>\n                    <tr><td>9</td><td>Minister</td></tr>\n                    <tr class=\"odd\"><td>10</td><td>Rev.</td></tr>\n                    <tr><td>11</td><td>Mr &amp; Mrs</td></tr>\n                    <tr class=\"odd\"><td>12</td><td>Adv</td></tr>\n                    </table>",
                    "example": 1
                },
                "first_name": {
                    "type": "string",
                    "description": "The first name of the lead",
                    "example": "John"
                },
                "surname": {
                    "type": "string",
                    "description": "The last name of the lead",
                    "example": "Smith"
                },
                "id_number": {
                    "type": "string",
                    "description": "The ID number of the lead",
                    "example": "ABC123456"
                },
                "passport": {
                    "type": "string",
                    "description": "The passport number of the lead",
                    "example": "YZ-101010"
                },
                "cell_number": {
                    "type": "string",
                    "description": "The cell number",
                    "example": "27123456789"
                },
                "home_number": {
                    "type": "string",
                    "description": "The home phone number",
                    "example": "27123456789"
                },
                "work_number": {
                    "type": "string",
                    "description": "The work phone number",
                    "example": "27123456789"
                },
                "email": {
                    "type": "string",
                    "description": "The email address",
                    "example": "john.smith@example.com"
                },
                "cartrack_username": {
                    "type": "string",
                    "description": "If the lead has a valid Cartrack account, please provide the username in this field. Otherwise, the bank and address fields will be mandatory",
                    "example": "ABC00001"
                },
                "address": {
                    "type": "object",
                    "description": "This object must contain the lead's address details. It can be empty if the lead has a valid cartrack_username",
                    "required": [
                        "address_type_id"
                    ],
                    "properties": {
                        "line_1": {
                            "type": "string",
                            "description": "Address line 1",
                            "example": "48 STREET"
                        },
                        "line_2": {
                            "type": "string",
                            "description": "Address line 2",
                            "example": "SAMPLE"
                        },
                        "line_3": {
                            "type": "string",
                            "description": "Address line 3",
                            "example": "SAMPLE"
                        },
                        "suburb": {
                            "type": "string",
                            "description": "Suburb",
                            "example": "EAST WEST"
                        },
                        "town": {
                            "type": "string",
                            "description": "Town",
                            "example": "ANYTOWN"
                        },
                        "province": {
                            "type": "string",
                            "description": "Province",
                            "example": "SOUTH NORTH"
                        },
                        "postal_code": {
                            "type": "string",
                            "description": "Postal code",
                            "example": "54321"
                        }
                    }
                },
                "bank": {
                    "type": "object",
                    "description": "This object must contain the lead's bank details. It can be empty if the lead has a valid cartrack_username",
                    "required": [
                        "bank_account_type"
                    ],
                    "properties": {
                        "bank_account_type": {
                            "type": "string",
                            "description": "The bank account type can only be one of the following: \n                            <table class=\"tableTitle\">\n                            <tr><th>bank_account_type</th></tr>\n                            <tr class=\"odd\"><td>Cheque</td></tr>\n                            <tr><td>Savings</td></tr>\n                            <tr class=\"odd\"><td>Current</td></tr>\n                            <tr><td>Transmission</td></tr>\n                            </table>",
                            "example": "Cheque"
                        },
                        "bank_name": {
                            "type": "string",
                            "description": "The name of the lead's bank",
                            "example": "Sample Bank"
                        },
                        "account_holder": {
                            "type": "string",
                            "description": "The name of the lead's account holder",
                            "example": "John Smith"
                        },
                        "account_number": {
                            "type": "string",
                            "description": "The lead's account number",
                            "example": "12340000123456789123456789"
                        },
                        "branch_code": {
                            "type": "string",
                            "description": "The lead's bank branch's code",
                            "example": "123456"
                        },
                        "bank_debit_day": {
                            "type": "integer",
                            "description": "The day of the month when the bank account must be debited.\n                            <table class=\"tableTitle\">\n                            <tr><th>bank_debit_day</th><th>description</th></tr>\n                            <tr><td>15</td><td>15th</td></tr>\n                            <tr><td>25</td><td>25th</td></tr>\n                            <tr><td>28</td><td>Last Day/Month</td></tr>\n                            </table>\n                            ",
                            "example": 26
                        }
                    }
                },
                "vehicles": {
                    "type": "array",
                    "description": "This array must contain the list of vehicle objects associated to the lead's policy. It cannot be empty",
                    "items": {
                        "$ref": "#/definitions/lead_policy_vehicles_item"
                    }
                }
            }
        },
        "lead_policy_item": {
            "type": "object",
            "properties": {
                "policy_id": {
                    "type": "integer",
                    "description": "The policy_id that was created",
                    "example": 1234567
                }
            }
        },
        "lead_policy_vehicles_item": {
            "type": "object",
            "required": [
                "lead_product_id",
                "registration"
            ],
            "properties": {
                "lead_product_id": {
                    "type": "integer",
                    "description": "Required. The product id applicable for this lead. Please contact our team to obtain a valid id",
                    "example": 123
                },
                "manufacturer_make_code": {
                    "type": "string",
                    "description": "If manufacturer_make_code is provided, it is not required to pass the vehicle_make and vehicle_model. Otherwise both fields are required.",
                    "example": "0012"
                },
                "registration": {
                    "type": "string",
                    "description": "The license plate of the vehicle",
                    "example": "ABC1234X"
                },
                "vehicle_make": {
                    "type": "string",
                    "description": "The vehicle maker",
                    "example": "Tesla"
                },
                "vehicle_model": {
                    "type": "string",
                    "description": "The vehicle model",
                    "example": "Model S"
                },
                "vehicle_colour": {
                    "type": "string",
                    "description": "The vehicle colour",
                    "example": "Blue"
                },
                "year_model": {
                    "type": "string",
                    "description": "The vehicle year",
                    "example": "2017"
                },
                "engine_number": {
                    "type": "string",
                    "description": "The engine number of the vehicle",
                    "example": "52WVXVC10338"
                },
                "vin_number": {
                    "type": "string",
                    "description": "The Vehicle Identification Number",
                    "example": "JH4KA4630JC008595"
                },
                "vehicle_derivative": {
                    "type": "string",
                    "description": "A derivative name for the vehicle",
                    "example": "Tesla Model S AWD 100D"
                }
            }
        },
        "key": {
            "title": "key object",
            "type": "object",
            "description": "The bluetooth key",
            "required": [
                "bluetooth_key",
                "vehicle"
            ],
            "properties": {
                "bluetooth_key": {
                    "type": "string",
                    "x-nullable": true,
                    "example": "83936874C3404131D645399DFD8BDB36ED9561934D48D6ABCD1F7AD7863627C1",
                    "description": "The 32 bytes bluetooth key."
                },
                "vehicle": {
                    "$ref": "#/definitions/mikey-vehicle"
                }
            }
        },
        "mikey-vehicle": {
            "title": "vehicle object",
            "type": "object",
            "required": [
                "terminal_id",
                "vehicle_id",
                "registration",
                "terminal_serial"
            ],
            "description": "The vehicle information.",
            "properties": {
                "vehicle_id": {
                    "type": "integer",
                    "description": "The id of the vehicle",
                    "example": 12345
                },
                "registration": {
                    "type": "string",
                    "description": "The license plate of the vehicle",
                    "example": "ABC1234X"
                },
                "terminal_id": {
                    "type": "integer",
                    "description": "The id of the terminal installed in the vehicle",
                    "example": 456789
                },
                "terminal_serial": {
                    "type": "string",
                    "description": "The serial of the cartrack terminal inside the vehicle",
                    "example": "CTK-12345"
                }
            }
        },
        "randomisation-request": {
            "title": "object",
            "type": "object",
            "description": "This object returns the request id for randomising the key, and vehicle information object",
            "required": [
                "terminal_request_id",
                "vehicle"
            ],
            "properties": {
                "terminal_request_id": {
                    "type": "integer",
                    "example": 12345,
                    "description": "The randomisation request id"
                },
                "vehicle": {
                    "$ref": "#/definitions/mikey-vehicle"
                }
            }
        },
        "poi_item": {
            "title": "poi object",
            "type": "object",
            "properties": {
                "poi_id": {
                    "type": "integer",
                    "description": "The id of the point of interest",
                    "example": 12345
                },
                "name": {
                    "type": "string",
                    "description": "The name of the point of interest",
                    "example": "Head office"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the point of interest",
                    "example": "Where the big bosses are"
                },
                "update_ts": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-09-01 08:53:15",
                    "description": "Update timestamp"
                },
                "geo_radius": {
                    "type": "integer",
                    "description": "The point of interest's radius in meters",
                    "example": 300
                },
                "colour": {
                    "type": "string",
                    "description": "The colour of the point of interest",
                    "example": "#334455"
                },
                "latitude": {
                    "type": "float",
                    "description": "Geocoded data (not directly editable)",
                    "example": -26.180765
                },
                "longitude": {
                    "type": "float",
                    "description": "Geocoded data (not directly editable)",
                    "example": 28.442755
                },
                "position_description": {
                    "type": "string",
                    "description": "Geocoded location information (not directly editable)",
                    "example": "ABC near XYZ"
                },
                "subuser_id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "If the point of interest is owned by a subuser",
                    "example": "7489ff44-xxxx-11eb-xxxx-005056a801ca"
                }
            }
        },
        "create_poi": {
            "type": "object",
            "required": [
                "latitude",
                "longitude",
                "geo_radius",
                "name"
            ],
            "properties": {
                "name": {
                    "in": "body",
                    "type": "string",
                    "description": "The point of interest's name",
                    "example": "Name for POI"
                },
                "description": {
                    "in": "body",
                    "type": "string",
                    "description": "The point of interest's description",
                    "example": "Your description"
                },
                "latitude": {
                    "in": "body",
                    "description": "Decimal latitude",
                    "type": "float",
                    "example": 28.858403
                },
                "longitude": {
                    "in": "body",
                    "description": "Decimal longitude",
                    "type": "float",
                    "example": 28.2945
                },
                "geo_radius": {
                    "in": "body",
                    "description": "The point of interest's radius in meters",
                    "type": "integer",
                    "example": 300
                },
                "colour": {
                    "in": "body",
                    "description": "Hexadecimal colour value",
                    "type": "string",
                    "example": "#334455"
                }
            }
        },
        "update_poi": {
            "type": "object",
            "properties": {
                "name": {
                    "in": "body",
                    "type": "string",
                    "description": "The point of interest's name",
                    "example": "Name for POI"
                },
                "description": {
                    "in": "body",
                    "type": "string",
                    "description": "The point of interest's description",
                    "example": "Your description"
                },
                "latitude": {
                    "in": "body",
                    "description": "Decimal latitude",
                    "type": "float",
                    "example": 28.858403
                },
                "longitude": {
                    "in": "body",
                    "description": "Decimal longitude",
                    "type": "float",
                    "example": 28.2945
                },
                "geo_radius": {
                    "in": "body",
                    "description": "The point of interest's radius in meters",
                    "type": "integer",
                    "example": 300
                },
                "colour": {
                    "in": "body",
                    "description": "Hexadecimal colour value",
                    "type": "string",
                    "example": "#334455"
                }
            }
        },
        "subusers": {
            "type": "object",
            "properties": {
                "subuser_id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The ID of the subuser",
                    "example": "6226624c-f819-11ec-b939-0242ac120002"
                },
                "subuser_name": {
                    "type": "string",
                    "description": "The username of the subuser",
                    "example": "DMX179222"
                },
                "create_ts": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date of creatio of this subuser",
                    "example": "2022-01-28 16:48:03+02"
                },
                "update_ts": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The last update of this subuser",
                    "example": "2022-01-28 16:48:03+02"
                },
                "cell_number": {
                    "type": "string",
                    "x-nullable": true,
                    "description": "The phone number of the subuser",
                    "example": "27123456789"
                },
                "email": {
                    "type": "string",
                    "format": "email",
                    "x-nullable": true,
                    "description": "The email of the subuser",
                    "example": "user@mail.com"
                },
                "is_locked": {
                    "type": "boolean",
                    "description": "The state of the subuser's account locked/unlocked",
                    "example": false
                },
                "is_active": {
                    "type": "boolean",
                    "description": "The state of the subuser's account active/inactive",
                    "example": false
                }
            }
        },
        "subusers-login-history": {
            "type": "object",
            "properties": {
                "subuser_id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The ID of the subuser",
                    "example": "6226624c-f819-11ec-b939-0242ac120002"
                },
                "event_ts": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date of login took place",
                    "example": "2022-01-28 16:48:03+02"
                },
                "origin": {
                    "type": "string",
                    "description": "Displays the current login origin",
                    "example": "Fleet-App-Andriod"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "SUCCESS",
                        "FAILURE"
                    ],
                    "description": "The state of the subuser's login success/failure",
                    "example": "SUCCESS"
                }
            }
        },
        "vehicle_activity": {
            "title": "vehicle's activity object",
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "vehicle_id": {
                        "type": "integer",
                        "description": "The id of the vehicle",
                        "example": 12345
                    },
                    "registration": {
                        "type": "string",
                        "description": "The license plate of the vehicle",
                        "example": "ABC1234X"
                    },
                    "first_ignition_on": {
                        "type": "string",
                        "description": "The first recorded ignition on timestamp for that date",
                        "example": "2022-07-01 08:30:07"
                    },
                    "last_ignition_off": {
                        "type": "string",
                        "description": "The last recorded igntition off timestamp for that date",
                        "example": "2022-07-01 19:19:34"
                    },
                    "drivers": {
                        "title": "drivers object",
                        "type": "array",
                        "description": "The drivers that have been using this vehicle on that date, if associated with a tag ID",
                        "items": {
                            "type": "object",
                            "properties": {
                                "driver_id": {
                                    "type": "string",
                                    "format": "uuid",
                                    "example": "667e1124-xxxx-11eb-xxxx-005056a801ca",
                                    "description": "The driver's id",
                                    "x-nullable": true
                                },
                                "first_name": {
                                    "type": "string",
                                    "description": "The driver's first name",
                                    "example": "Joe",
                                    "x-nullable": true
                                },
                                "last_name": {
                                    "type": "string",
                                    "description": "The driver's last name",
                                    "example": "Blogs",
                                    "x-nullable": true
                                }
                            }
                        }
                    },
                    "total_working_hours": {
                        "type": "string",
                        "description": "The total time where the vehicle ignition was on on that date. A trip that started late on that date and ended the next day will be accounted entirely for the day where the trip started.",
                        "example": "01:41"
                    },
                    "total_break_hours": {
                        "type": "string",
                        "description": "The total time (as hh:mi) the vehicle had ignition off. based on a 24 hour day",
                        "example": "22:18"
                    },
                    "total_break_hours_trimmed": {
                        "type": "string",
                        "description": "The total time (as hh:mi) the vehicle had ignition off between the first ignition on and the last ignition off",
                        "example": "09:08"
                    }
                }
            }
        },
        "vehicle_custom_fields_items": {
            "type": "object",
            "required": [
                "label",
                "value"
            ],
            "properties": {
                "label": {
                    "type": "string",
                    "example": "Vehicle height"
                },
                "value": {
                    "type": "string",
                    "example": "3.25m"
                }
            }
        },
        "vehicle_events_all": {
            "title": "event object",
            "type": "object",
            "x-nullable": "true",
            "properties": {
                "event_id": {
                    "type": "integer",
                    "description": "The event id",
                    "example": 123456
                },
                "registration": {
                    "type": "string",
                    "description": "The vehicle registration",
                    "example": "ABC123X"
                },
                "driver_id": {
                    "type": "string",
                    "format": "uuid",
                    "x-nullable": "true",
                    "description": "The driver's uuid",
                    "example": "98547217-d5b7-11ec-b1fb-a4bf016cd6b2"
                },
                "event_description": {
                    "type": "string",
                    "description": "The event description",
                    "example": "IGNITION_ON",
                    "enum": [
                        "ADC_0_DOWN",
                        "ADC_0_UP",
                        "ADC_1_DOWN",
                        "ADC_1_UP",
                        "ADC_2_DOWN",
                        "ADC_2_UP",
                        "DOOR_1_CLOSE",
                        "DOOR_1_OPEN",
                        "DOOR_2_CLOSE",
                        "DOOR_2_OPEN",
                        "DOOR_3_CLOSE",
                        "DOOR_3_OPEN",
                        "DOOR_4_CLOSE",
                        "DOOR_4_OPEN",
                        "GEAR_CHANGE",
                        "GPS_LOCK",
                        "GPS_LOST",
                        "HANDBRAKE_OFF",
                        "HANDBRAKE_ON",
                        "HARSH_ACCELERATION",
                        "HARSH_BRAKING",
                        "HARSH_CORNERING",
                        "HAZARD_OFF",
                        "HAZARD_ON",
                        "IDLING_CONTINUE",
                        "IDLING_END",
                        "IDLING_START",
                        "IGNITION_OFF",
                        "IGNITION_ON",
                        "INDICATOR_LEFT_OFF",
                        "INDICATOR_LEFT_ON",
                        "INDICATOR_RIGHT_OFF",
                        "INDICATOR_RIGHT_ON",
                        "LIGHTS_OFF",
                        "LIGHTS_ON",
                        "MOTION_END",
                        "MOTION_START",
                        "OVERREV_END",
                        "OVERREV_START",
                        "PERIODIC_EVENT",
                        "REVERSE_OFF",
                        "REVERSE_ON",
                        "SEATBELT_DRIVER_OFF",
                        "SEATBELT_DRIVER_ON",
                        "SEATBELT_PASSENGER_OFF",
                        "SEATBELT_PASSENGER_ON",
                        "SPEEDING_END",
                        "SPEEDING_START",
                        "TEMPERATURE_1",
                        "TEMPERATURE_2",
                        "TEMPERATURE_3",
                        "TEMPERATURE_4",
                        "VEHICLE_LOCKED",
                        "VEHICLE_UNLOCKED"
                    ]
                },
                "longitude": {
                    "type": "float",
                    "x-nullable": "true",
                    "description": "The longitude of the event",
                    "example": 103.889653
                },
                "latitude": {
                    "type": "float",
                    "x-nullable": "true",
                    "description": "The latitude of the event",
                    "example": 1.320227
                },
                "altitude": {
                    "type": "integer",
                    "x-nullable": "true",
                    "description": "The vehicle's altitude in meters",
                    "example": 152
                },
                "odometer": {
                    "type": "integer",
                    "x-nullable": "true",
                    "description": "The vehicle's odometer",
                    "example": 1000
                },
                "bearing": {
                    "type": "integer",
                    "x-nullable": "true",
                    "description": "the vehicle's bearing",
                    "example": 100
                },
                "ignition": {
                    "type": "boolean",
                    "description": "The ignition status",
                    "example": true
                },
                "speed": {
                    "type": "integer",
                    "x-nullable": "true",
                    "description": "The speed of the vehicle's in km/h",
                    "example": 60
                },
                "road_speed": {
                    "type": "integer",
                    "x-nullable": "true",
                    "description": "The speed limit of the road where the vehicle is, in km/h",
                    "example": 70
                },
                "road_speeding": {
                    "type": "boolean",
                    "x-nullable": "true",
                    "description": "The state if the vehicle's speed exceeded the road speed, in km/h",
                    "example": true
                },
                "rpm": {
                    "type": "integer",
                    "x-nullable": "true",
                    "description": "The vehicle's revolution per minute",
                    "example": 764
                },
                "temp1": {
                    "type": "integer",
                    "x-nullable": "true",
                    "description": "The vehicle's temperature sensor 1",
                    "example": 0
                },
                "temp2": {
                    "type": "integer",
                    "x-nullable": "true",
                    "description": "The vehicle's temperature sensor 2",
                    "example": 0
                },
                "temp3": {
                    "type": "integer",
                    "x-nullable": "true",
                    "description": "The vehicle's temperature sensor 3",
                    "example": 0
                },
                "temp4": {
                    "type": "integer",
                    "x-nullable": "true",
                    "description": "The vehicle's temperature sensor 4",
                    "example": 0
                },
                "analog_0": {
                    "type": "integer",
                    "x-nullable": "true",
                    "description": "The vehicle's analog-to-digital converter signal (channel 0)",
                    "example": 0
                },
                "analog_1": {
                    "type": "integer",
                    "x-nullable": "true",
                    "description": "The vehicle's analog-to-digital converter signal (channel 1)",
                    "example": 0
                },
                "analog_2": {
                    "type": "integer",
                    "x-nullable": "true",
                    "description": "The vehicle's analog-to-digital converter signal (channel 2)",
                    "example": 0
                },
                "adc0": {
                    "type": [
                        "integer",
                        "float"
                    ],
                    "x-nullable": "true",
                    "description": "The vehicle's analog-to-digital converter signal (channel 0) expressed in voltage",
                    "example": 0
                },
                "adc1": {
                    "type": [
                        "integer",
                        "float"
                    ],
                    "x-nullable": "true",
                    "description": "The vehicle's analog-to-digital converter signal (channel 1) expressed in voltage",
                    "example": 0
                },
                "adc2": {
                    "type": [
                        "integer",
                        "float"
                    ],
                    "x-nullable": "true",
                    "description": "The vehicle's analog-to-digital converter signal (channel 2) expressed in voltage",
                    "example": 0
                },
                "position_description": {
                    "type": "string",
                    "x-nullable": "true",
                    "description": "The position description of where the vehicle is",
                    "example": "Tanjong Pagar, Singapore"
                },
                "event_ts": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The event date and time",
                    "example": "2022-01-28 16:48:03+02"
                },
                "received_ts": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The received date and time",
                    "example": "2022-01-28 16:48:03+02"
                }
            }
        },
        "vehicle_events": {
            "title": "event object",
            "type": "object",
            "x-nullable": "true",
            "properties": {
                "event_id": {
                    "type": "integer",
                    "description": "The event id",
                    "example": 123456
                },
                "registration": {
                    "type": "string",
                    "description": "The vehicle registration",
                    "example": "ABC123X"
                },
                "driver_id": {
                    "type": "string",
                    "format": "uuid",
                    "x-nullable": "true",
                    "description": "The driver's uuid",
                    "example": "98547217-d5b7-11ec-b1fb-a4bf016cd6b2"
                },
                "event_description": {
                    "type": "string",
                    "description": "The event description",
                    "example": "IGNITION_ON",
                    "enum": [
                        "ADC_0_DOWN",
                        "ADC_0_UP",
                        "ADC_1_DOWN",
                        "ADC_1_UP",
                        "ADC_2_DOWN",
                        "ADC_2_UP",
                        "DOOR_1_CLOSE",
                        "DOOR_1_OPEN",
                        "DOOR_2_CLOSE",
                        "DOOR_2_OPEN",
                        "DOOR_3_CLOSE",
                        "DOOR_3_OPEN",
                        "DOOR_4_CLOSE",
                        "DOOR_4_OPEN",
                        "GEAR_CHANGE",
                        "GPS_LOCK",
                        "GPS_LOST",
                        "HANDBRAKE_OFF",
                        "HANDBRAKE_ON",
                        "HARSH_ACCELERATION",
                        "HARSH_BRAKING",
                        "HARSH_CORNERING",
                        "HAZARD_OFF",
                        "HAZARD_ON",
                        "IDLING_CONTINUE",
                        "IDLING_END",
                        "IDLING_START",
                        "IGNITION_OFF",
                        "IGNITION_ON",
                        "INDICATOR_LEFT_OFF",
                        "INDICATOR_LEFT_ON",
                        "INDICATOR_RIGHT_OFF",
                        "INDICATOR_RIGHT_ON",
                        "LIGHTS_OFF",
                        "LIGHTS_ON",
                        "MOTION_END",
                        "MOTION_START",
                        "OVERREV_END",
                        "OVERREV_START",
                        "PERIODIC_EVENT",
                        "REVERSE_OFF",
                        "REVERSE_ON",
                        "SEATBELT_DRIVER_OFF",
                        "SEATBELT_DRIVER_ON",
                        "SEATBELT_PASSENGER_OFF",
                        "SEATBELT_PASSENGER_ON",
                        "SPEEDING_END",
                        "SPEEDING_START",
                        "TEMPERATURE_1",
                        "TEMPERATURE_2",
                        "TEMPERATURE_3",
                        "TEMPERATURE_4",
                        "VEHICLE_LOCKED",
                        "VEHICLE_UNLOCKED"
                    ]
                },
                "longitude": {
                    "type": "float",
                    "x-nullable": "true",
                    "description": "The longitude of the event",
                    "example": 103.889653
                },
                "latitude": {
                    "type": "float",
                    "x-nullable": "true",
                    "description": "The latitude of the event",
                    "example": 1.320227
                },
                "altitude": {
                    "type": "integer",
                    "x-nullable": "true",
                    "description": "The vehicle's altitude in meters",
                    "example": 152
                },
                "odometer": {
                    "type": "integer",
                    "x-nullable": "true",
                    "description": "The vehicle's odometer",
                    "example": 1000
                },
                "bearing": {
                    "type": "integer",
                    "x-nullable": "true",
                    "description": "the vehicle's bearing",
                    "example": 100
                },
                "ignition": {
                    "type": "boolean",
                    "description": "The ignition status",
                    "example": true
                },
                "speed": {
                    "type": "integer",
                    "x-nullable": "true",
                    "description": "The speed of the vehicle's in km/h",
                    "example": 60
                },
                "road_speed": {
                    "type": "integer",
                    "x-nullable": "true",
                    "description": "The speed limit of the road where the vehicle is, in km/h",
                    "example": 70
                },
                "road_speeding": {
                    "type": "boolean",
                    "x-nullable": "true",
                    "description": "The state if the vehicle's speed exceeded the road speed, in km/h",
                    "example": true
                },
                "rpm": {
                    "type": "integer",
                    "x-nullable": "true",
                    "description": "The vehicle's revolution per minute",
                    "example": 764
                },
                "temp1": {
                    "type": "integer",
                    "x-nullable": "true",
                    "description": "The vehicle's temperature sensor 1",
                    "example": 0
                },
                "temp2": {
                    "type": "integer",
                    "x-nullable": "true",
                    "description": "The vehicle's temperature sensor 2",
                    "example": 0
                },
                "temp3": {
                    "type": "integer",
                    "x-nullable": "true",
                    "description": "The vehicle's temperature sensor 3",
                    "example": 0
                },
                "temp4": {
                    "type": "integer",
                    "x-nullable": "true",
                    "description": "The vehicle's temperature sensor 4",
                    "example": 0
                },
                "analog_0": {
                    "type": [
                        "integer",
                        "float"
                    ],
                    "x-nullable": "true",
                    "description": "The vehicle's analog-to-digital converter signal (channel 0)",
                    "example": 0
                },
                "analog_1": {
                    "type": [
                        "integer",
                        "float"
                    ],
                    "x-nullable": "true",
                    "description": "The vehicle's analog-to-digital converter signal (channel 1)",
                    "example": 0
                },
                "analog_2": {
                    "type": [
                        "integer",
                        "float"
                    ],
                    "x-nullable": "true",
                    "description": "The vehicle's analog-to-digital converter signal (channel 2)",
                    "example": 0
                },
                "adc0": {
                    "type": [
                        "integer",
                        "float"
                    ],
                    "x-nullable": "true",
                    "description": "The vehicle's analog-to-digital converter signal (channel 0) expressed in voltage",
                    "example": 0
                },
                "adc1": {
                    "type": [
                        "integer",
                        "float"
                    ],
                    "x-nullable": "true",
                    "description": "The vehicle's analog-to-digital converter signal (channel 1) expressed in voltage",
                    "example": 0
                },
                "adc2": {
                    "type": [
                        "integer",
                        "float"
                    ],
                    "x-nullable": "true",
                    "description": "The vehicle's analog-to-digital converter signal (channel 2) expressed in voltage",
                    "example": 0
                },
                "position_description": {
                    "type": "string",
                    "x-nullable": "true",
                    "description": "The position description of where the vehicle is",
                    "example": "Tanjong Pagar, Singapore"
                },
                "event_ts": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The event date and time",
                    "example": "2022-01-28 16:48:03+02"
                },
                "received_ts": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The received date and time",
                    "example": "2022-01-28 16:48:03+02"
                }
            }
        },
        "vehicle_group_item": {
            "title": "group objects",
            "type": "object",
            "properties": {
                "group_id": {
                    "type": "integer",
                    "description": "The id of the group",
                    "example": 12345
                },
                "name": {
                    "type": "string",
                    "description": "The name of the newly created group",
                    "example": "Good looking vehicles"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the newly created group",
                    "example": "This group gathers good looking vehicles"
                },
                "subuser_id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The subuser_id associated to this newly created vehicle",
                    "example": "7489ff44-xxxx-11eb-xxxx-005056a801ca"
                },
                "vehicles": {
                    "type": "array",
                    "description": "The vehicles associated with this group",
                    "items": {
                        "type": "object",
                        "properties": {
                            "vehicle_id": {
                                "type": "integer",
                                "description": "The id of the vehicle",
                                "example": 12345
                            },
                            "registration": {
                                "type": "string",
                                "description": "The license plate of the vehicle",
                                "example": "ABC1234X"
                            }
                        }
                    }
                }
            }
        },
        "create_vehicle_group": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "in": "body",
                    "description": "The name of the group",
                    "type": "string",
                    "example": "Good looking vehicles"
                },
                "description": {
                    "in": "body",
                    "description": "Add a description for this new vehicle group",
                    "type": "string",
                    "example": "This group gathers good looking vehicles"
                },
                "subuser_id": {
                    "in": "body",
                    "description": "Add a subuser_id the vehicle group must be assigned to a specific subuser_id",
                    "type": "string",
                    "format": "uuid",
                    "example": "7489ff44-xxxx-11eb-xxxx-005056a801ca"
                }
            }
        },
        "update_vehicle_group": {
            "type": "object",
            "minProperties": 1,
            "properties": {
                "name": {
                    "in": "body",
                    "description": "The updated name of the group",
                    "type": "string",
                    "example": "Group of old vehicles"
                },
                "description": {
                    "in": "body",
                    "description": "The updated description of the group",
                    "type": "string",
                    "example": "These vehicles were manufactured before 1991"
                },
                "subuser_id": {
                    "in": "body",
                    "description": "The updated subuser_id",
                    "type": "string",
                    "format": "uuid",
                    "example": "7489ff44-xxxx-11eb-xxxx-005056a801ca"
                }
            }
        },
        "vehicle_id": {
            "type": "integer",
            "description": "The id of the vehicle",
            "example": 12345
        },
        "vehicle_item": {
            "title": "vehicle objects",
            "type": "object",
            "properties": {
                "vehicle_id": {
                    "$ref": "#/definitions/vehicle_id"
                },
                "terminal_id": {
                    "type": "integer",
                    "description": "The id of the terminal installed in the vehicle",
                    "example": 456789
                },
                "registration": {
                    "type": "string",
                    "description": "The license plate of the vehicle",
                    "example": "ABC1234X"
                },
                "default_timezone": {
                    "type": "integer",
                    "x-nullable": true,
                    "description": "The vehicle's default timezone",
                    "example": 130
                },
                "monthly_mileage_limit": {
                    "type": "integer",
                    "x-nullable": true,
                    "description": "The monthly mileage limit in km",
                    "example": 1300
                },
                "tolling_tag_id": {
                    "type": "string",
                    "x-nullable": true,
                    "description": "The tolling tag id assigned to the vehicle",
                    "example": "12345"
                },
                "vehicle_name": {
                    "type": "string",
                    "x-nullable": true,
                    "description": "A name that can be given to the vehicle",
                    "example": "Big car"
                },
                "client_vehicle_description": {
                    "type": "string",
                    "x-nullable": true,
                    "description": "A description that can be given to the vehicle",
                    "maxLength": 64,
                    "example": "The oldest car in the fleet"
                },
                "licence_code": {
                    "type": "string",
                    "x-nullable": true,
                    "description": "The license code assigned to the vehicle",
                    "maxLength": 10,
                    "example": "AFG389GDJ"
                },
                "licence_issued_date": {
                    "type": "string",
                    "x-nullable": true,
                    "description": "The license issued date",
                    "format": "date",
                    "example": "2020-01-01"
                },
                "licence_expiry_date": {
                    "type": "string",
                    "x-nullable": true,
                    "description": "The license expiry date",
                    "format": "date",
                    "example": "2025-01-01"
                },
                "max_speed": {
                    "type": "integer",
                    "x-nullable": true,
                    "description": "The maximum speed for this vehicle in km/h",
                    "example": 130
                },
                "manufacturer": {
                    "type": "string",
                    "x-nullable": true,
                    "description": "The vehicle manufacturer",
                    "example": "Toyota"
                },
                "default_driver": {
                    "type": "string",
                    "format": "uuid",
                    "x-nullable": true,
                    "description": "The default driver assigned to this vehicle",
                    "example": "bca277ee-xxxx-11ec-xxxx-005056a825ae"
                },
                "home_geofence": {
                    "type": "string",
                    "format": "uuid",
                    "x-nullable": true,
                    "description": "The default geofence assigned to this vehicle",
                    "example": "bca277ee-yyyy-11ec-yyyy-005056a825ae"
                },
                "model": {
                    "type": "string",
                    "x-nullable": true,
                    "description": "The vehicle manufacturer",
                    "example": "Land Cruiser"
                },
                "model_year": {
                    "type": "integer",
                    "x-nullable": true,
                    "description": "The vehicle model year",
                    "example": 1983
                },
                "colour": {
                    "type": "string",
                    "x-nullable": true,
                    "description": "The vehicle colour",
                    "example": "Pink"
                },
                "chassis_number": {
                    "type": "string",
                    "x-nullable": true,
                    "description": "The chassis number of the vehicle",
                    "example": "ABDE234235FGRE"
                }
            }
        },
        "vehicle_power_takeoff": {
            "type": "object",
            "properties": {
                "event_time": {
                    "type": "timestamp",
                    "description": "The event date and time",
                    "example": "2022-01-28 16:48:03+02"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the PTO - either Active or Inactive",
                    "example": "Active"
                }
            }
        },
        "update_risk": {
            "type": "object",
            "required": [
                "finance_risk"
            ],
            "properties": {
                "finance_risk": {
                    "type": "integer",
                    "example": "9",
                    "description": "Financial risk from 0 to 10, where 10 is the highest risk."
                },
                "finance_hint": {
                    "type": "string",
                    "example": "For endorsement",
                    "description": "Brief description of the update."
                }
            }
        },
        "update_risk_multi": {
            "type": "array",
            "items": {
                "type": "object",
                "required": [
                    "registration",
                    "finance_risk"
                ],
                "properties": {
                    "registration": {
                        "type": "string",
                        "description": "The license plate of the vehicle",
                        "example": "ABC1234X"
                    },
                    "finance_risk": {
                        "type": "integer",
                        "example": "9",
                        "description": "Financial risk from 0 to 10, where 10 is the highest risk."
                    },
                    "finance_hint": {
                        "type": "string",
                        "example": "For endorsement",
                        "description": "Brief description of the update."
                    }
                }
            }
        },
        "vehicle_status": {
            "title": "vehicle status object",
            "type": "object",
            "x-nullable": true,
            "properties": {
                "vehicle_id": {
                    "type": "integer",
                    "description": "The id of the vehicle",
                    "example": 12345
                },
                "registration": {
                    "type": "string",
                    "description": "The license plate of the vehicle",
                    "example": "ABC1234X"
                },
                "event_ts": {
                    "type": "string",
                    "format": "date-time",
                    "x-nullable": true,
                    "description": "The last received event's date & time",
                    "example": "2022-01-28 16:48:03+02"
                },
                "bearing": {
                    "type": "integer",
                    "x-nullable": true,
                    "description": "The vehicle's direction/bearing at the time of last update",
                    "example": 312
                },
                "speed": {
                    "type": "integer",
                    "x-nullable": true,
                    "description": "The vehicle speed at the time of the last update in km/h",
                    "example": 0
                },
                "ignition": {
                    "type": "boolean",
                    "x-nullable": true,
                    "example": true,
                    "description": "Whether the vehicle's ignition is on"
                },
                "odometer": {
                    "type": "integer",
                    "x-nullable": true,
                    "example": 194808012,
                    "description": "The vehicle's odometer at the time of the last update in meters"
                },
                "clock": {
                    "type": "integer",
                    "x-nullable": true,
                    "example": 8083,
                    "description": "The vehicle's clock at the time of the last update in meters"
                },
                "altitude": {
                    "type": "integer",
                    "x-nullable": true,
                    "description": "The altitude above sea level in meters",
                    "example": 1681
                },
                "rpm": {
                    "type": "integer",
                    "x-nullable": true,
                    "description": "The vehicle's engine RPM at the time of the last update",
                    "example": 2000
                },
                "road_speed": {
                    "type": "integer",
                    "x-nullable": true,
                    "description": "The road speed limit at the time of last update in km/h",
                    "example": 60
                },
                "vext": {
                    "type": "string",
                    "x-nullable": true,
                    "format": "float",
                    "description": "The vehicle's vext at the time of last update",
                    "example": "14.520"
                },
                "temp1": {
                    "type": "integer",
                    "x-nullable": true,
                    "description": "The vehicle's temperature sensor 1",
                    "example": 0
                },
                "temp2": {
                    "type": "integer",
                    "x-nullable": true,
                    "description": "The vehicle's temperature sensor 2",
                    "example": 0
                },
                "temp3": {
                    "type": "integer",
                    "x-nullable": true,
                    "description": "The vehicle's temperature sensor 3",
                    "example": 0
                },
                "temp4": {
                    "type": "integer",
                    "x-nullable": true,
                    "description": "The vehicle's temperature sensor 4",
                    "example": 0
                },
                "last_identification_tag_id": {
                    "type": "string",
                    "format": "uuid",
                    "x-nullable": true,
                    "description": "The most recently used driver tag ID",
                    "example": "7489ff44-xxxx-11eb-xxxx-005056a801ca"
                },
                "io_panic": {
                    "type": "string",
                    "x-nullable": true,
                    "description": "Whether the vehicle's panic system is activate or not activate. Please make sure you have this option installed before using its values. ",
                    "enum": [
                        "HIGH",
                        "LOW"
                    ],
                    "example": "LOW"
                },
                "io_disarm": {
                    "type": "string",
                    "x-nullable": true,
                    "description": "Whether the vehicle's is locked or unlocked. HIGH = locked. LOW = unlocked.",
                    "enum": [
                        "HIGH",
                        "LOW"
                    ],
                    "example": "LOW"
                },
                "driver": {
                    "title": "driver object",
                    "type": "object",
                    "description": "The driver if associated with the tag ID",
                    "properties": {
                        "driver_id": {
                            "type": "string",
                            "format": "uuid",
                            "x-nullable": true,
                            "example": "667e1124-xxxx-11eb-xxxx-005056a801ca",
                            "description": "The driver's ID"
                        },
                        "first_name": {
                            "type": "string",
                            "x-nullable": true,
                            "description": "The driver's first name",
                            "example": "Joe"
                        },
                        "last_name": {
                            "type": "string",
                            "x-nullable": true,
                            "description": "The driver's last name",
                            "example": "Blogs"
                        },
                        "id_number": {
                            "type": "string",
                            "x-nullable": true,
                            "description": "The driver's identification number",
                            "example": "7805165060000"
                        },
                        "license_number": {
                            "type": "string",
                            "x-nullable": true,
                            "description": "The driver's license number",
                            "example": "ABCD1234EFGH5678"
                        },
                        "tag_id": {
                            "type": "string",
                            "format": "uuid",
                            "x-nullable": true,
                            "description": "The driver's tag ID",
                            "example": "7489ff44-xxxx-11eb-xxxx-005056a801ca"
                        },
                        "phone_number": {
                            "type": "string",
                            "x-nullable": true,
                            "description": "The driver's phone number",
                            "example": "27659700000"
                        }
                    }
                },
                "fuel": {
                    "title": "fuel object",
                    "type": "object",
                    "description": "The latest fuel information",
                    "properties": {
                        "updated": {
                            "type": "string",
                            "format": "date-time",
                            "x-nullable": true,
                            "description": "Date and time the fuel level updated",
                            "example": "2021-10-07 20:06:29+02"
                        },
                        "level": {
                            "type": "integer",
                            "x-nullable": true,
                            "description": "Volume of fuel left in the tank",
                            "example": 43
                        },
                        "precentage_left": {
                            "type": "integer",
                            "x-nullable": true,
                            "description": "Percentage of fuel left in the tank",
                            "example": 77
                        }
                    }
                },
                "location": {
                    "title": "location object",
                    "type": "object",
                    "description": "The latest vehicle location",
                    "properties": {
                        "updated": {
                            "type": "string",
                            "format": "date-time",
                            "x-nullable": true,
                            "description": "The date and time when the geolocation was updated",
                            "example": "2022-01-28 16:48:03+02"
                        },
                        "longitude": {
                            "type": "float",
                            "x-nullable": true,
                            "description": "The location's longitude",
                            "example": 28.234349
                        },
                        "latitude": {
                            "type": "float",
                            "x-nullable": true,
                            "description": "The location's latitude",
                            "example": 1.319877
                        },
                        "gps_fix_type": {
                            "type": "integer",
                            "x-nullable": true,
                            "description": "Fix type of 3 is full GPS positioning",
                            "example": 3
                        },
                        "position_description": {
                            "type": "string",
                            "x-nullable": true,
                            "description": "The position description - if available",
                            "example": "Yishun Ave 8, Singapore, Singapore"
                        }
                    }
                }
            }
        }
    }
}
